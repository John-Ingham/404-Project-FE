{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Camera } from 'expo-camera';\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#354D2A',\n    padding: 20,\n    borderRadius: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain'\n  },\n  container: {\n    flex: 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  cameraContainer: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  },\n  cameraButton: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 18,\n    color: 'white'\n  }\n});\n\nfunction CameraScreen() {\n  var _useState = useState({\n    localUri: \"\"\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      cameraRollImage = _useState2[0],\n      setCameraRollImage = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      cameraPhoto = _useState4[0],\n      setCameraPhoto = _useState4[1];\n\n  var _useState5 = useState(\"\"),\n      _useState6 = _slicedToArray(_useState5, 2),\n      haveCameraPermission = _useState6[0],\n      setHaveCameraPermission = _useState6[1];\n\n  var _useState7 = useState(Camera.Constants.Type.back),\n      _useState8 = _slicedToArray(_useState7, 2),\n      type = _useState8[0],\n      setType = _useState8[1];\n\n  function cameraFunction() {\n    console.log(\"Check, getting in here?\");\n  }\n\n  var openCameraAsync = function openCameraAsync() {\n    var cameraPermissionResult;\n    return _regeneratorRuntime.async(function openCameraAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n          case 2:\n            cameraPermissionResult = _context.sent;\n\n            if (!(cameraPermissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert('Permission to use camera is required!');\n            return _context.abrupt(\"return\");\n\n          case 6:\n            setHaveCameraPermission(\"Yes\");\n            console.log(\">>>>>>>>>Hello!\");\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  console.log(\">>>>>>>>>Hello....2  !\");\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionResult = _context2.sent;\n            console.log(permissionResult, \" IMAGE PICK RESULT\");\n\n            if (!(permissionResult.granted === false)) {\n              _context2.next = 7;\n              break;\n            }\n\n            alert('Permission to access camera roll is required!');\n            return _context2.abrupt(\"return\");\n\n          case 7:\n            _context2.next = 9;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 9:\n            pickerResult = _context2.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context2.next = 12;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 12:\n            setCameraRollImage({\n              localUri: pickerResult.uri\n            });\n\n          case 13:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (cameraRollImage.localUri !== \"\") {\n    return React.createElement(View, {\n      style: styles.container\n    }, React.createElement(Image, {\n      source: {\n        uri: cameraRollImage.localUri\n      },\n      style: styles.thumbnail\n    }), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return alert('Saved!');\n      },\n      style: styles.button\n    }, React.createElement(Text, {\n      style: styles.buttonText\n    }, \"Save chosen image\")));\n  }\n\n  if (haveCameraPermission === \"Yes\") {\n    console.log(\"Are we in the render of camera?\");\n    return React.createElement(View, {\n      style: styles.cameraContainer\n    }, React.createElement(Text, null, \"Are we here?\"));\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Text, null, \"Add a plant to your collection!\"), React.createElement(Text, null, \"Push button to select from camera roll \"), React.createElement(TouchableOpacity, {\n    onPress: openImagePickerAsync,\n    style: styles.button\n  }, React.createElement(Text, {\n    style: styles.buttonText\n  }, \"Pick a photo\")), React.createElement(Text, null, \" Push button to open camera\"), React.createElement(TouchableOpacity, {\n    onPress: openCameraAsync,\n    style: styles.button\n  }, React.createElement(Text, {\n    style: styles.buttonText\n  }, \"Take a photo\")));\n}\n\nexport default CameraScreen;","map":{"version":3,"sources":["/home/john/northcoders/projects/404-Project-FE/components/CameraScreen.tsx"],"names":["React","useState","ImagePicker","Camera","styles","StyleSheet","create","button","backgroundColor","padding","borderRadius","buttonText","fontSize","color","thumbnail","width","height","resizeMode","container","flex","alignItems","justifyContent","cameraContainer","camera","buttonContainer","flexDirection","margin","cameraButton","alignSelf","text","CameraScreen","localUri","cameraRollImage","setCameraRollImage","cameraPhoto","setCameraPhoto","haveCameraPermission","setHaveCameraPermission","Constants","Type","back","type","setType","cameraFunction","console","log","openCameraAsync","requestCameraPermissionsAsync","cameraPermissionResult","granted","alert","openImagePickerAsync","requestMediaLibraryPermissionsAsync","permissionResult","launchImageLibraryAsync","pickerResult","cancelled","uri"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport * as Permissions from \"expo-permissions\"\nimport { View, Text, Image, TouchableOpacity, StyleSheet } from \"react-native\";\nimport * as ImagePicker from 'expo-image-picker'\nimport {Camera} from 'expo-camera'\n\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#354D2A',\n    padding: 20,\n    borderRadius: 5,\n    \n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff',\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain', //useful line, makes the image not square if the selected image is not\n  },\n  container: {\n    flex: 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // camera\n  cameraContainer: {\n    flex: 1,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20,\n  },\n  cameraButton: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 18,\n    color: 'white',\n  },\n  \n})\n\nfunction CameraScreen() {\n  \n    const [cameraRollImage, setCameraRollImage] = useState({localUri:\"\"})\n    const [cameraPhoto, setCameraPhoto] = useState(null) //NB not in use atm\n    const [haveCameraPermission, setHaveCameraPermission] = useState(\"\")\n    const [type, setType] = useState(Camera.Constants.Type.back);\n  \n    function cameraFunction() {\n      console.log(\"Check, getting in here?\")\n        // return (\n        //  <View style={styles.cameraContainer}>\n        //    <Camera style={styles.camera} type={type}>\n        //      <View style={styles.buttonContainer}>\n        //        <TouchableOpacity\n        //          style={styles.cameraButton}\n        //          onPress={() => {\n        //              setType(\n        //                  type === Camera.Constants.Type.back\n        //                    ? Camera.Constants.Type.front\n        //                    : Camera.Constants.Type.back\n        //                );\n        //              }}>\n        //              <Text style={styles.text}> Flip </Text>\n        //            </TouchableOpacity>\n        //          </View>\n        //        </Camera>\n        //      </View>\n        //    );\n         }\n\n\n  let openCameraAsync = async () => {\n    // let cameraPermissionResult = await Permissions.askAsync(Permissions.CAMERA)\n      let cameraPermissionResult = await Camera.requestCameraPermissionsAsync()\n  // console.log(cameraPermissionResult, \">>>>>>>>>>>>>>>>\")\n    if (cameraPermissionResult.granted === false) {\n        alert ('Permission to use camera is required!')\n        return\n      }\n  \n      setHaveCameraPermission(\"Yes\")  \n      \n      console.log(\">>>>>>>>>Hello!\")\n\n    }\n    console.log(\">>>>>>>>>Hello....2  !\")\n\n    \n    let openImagePickerAsync = async () => {\n      let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync()\n      console.log(permissionResult, \" IMAGE PICK RESULT\")\n      \n      if (permissionResult.granted === false) {\n        alert('Permission to access camera roll is required!')\n        return\n      }\n      \n      let pickerResult = await ImagePicker.launchImageLibraryAsync()\n      if (pickerResult.cancelled === true) {\n        return\n      }\n      setCameraRollImage({ localUri: pickerResult.uri })\n      \n    }\n    \n    if (cameraRollImage.localUri !== \"\"){\n      return (\n        <View style={styles.container}>\n          <Image\n            source={{ uri: cameraRollImage.localUri }}\n            style={styles.thumbnail}\n            />\n        <TouchableOpacity\n          onPress={() => alert('Saved!')}\n          style={styles.button}\n          >\n\n        <Text style={styles.buttonText}>Save chosen image</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n  if (haveCameraPermission === \"Yes\") {\n    console.log(\"Are we in the render of camera?\")\n     return (\n         <View style={styles.cameraContainer}>\n           <Text>Are we here?</Text>\n           {/* <Camera style={styles.camera} type={type}>\n             <View style={styles.buttonContainer}>\n               <TouchableOpacity\n                 style={styles.cameraButton}\n                 onPress={() => {\n                     setType(\n                         type === Camera.Constants.Type.back\n                           ? Camera.Constants.Type.front\n                           : Camera.Constants.Type.back\n                       );\n                     }}>\n                     <Text style={styles.text}> Flip </Text>\n                   </TouchableOpacity>\n                 </View>\n               </Camera> */}\n             </View>\n           );\n\n  }\n  \n  return (\n    <View style={styles.container}>\n\n      <Text >Add a plant to your collection!</Text>\n      {/* <Image source={} style={} /> */}\n      <Text>Push button to select from camera roll </Text>\n\n      <TouchableOpacity onPress={openImagePickerAsync} style={styles.button}>\n        <Text style={styles.buttonText}>Pick a photo</Text>\n      </TouchableOpacity>\n      <Text> Push button to open camera</Text>\n      <TouchableOpacity onPress={openCameraAsync} style={styles.button}>\n        <Text style={styles.buttonText}>Take a photo</Text>\n      </TouchableOpacity>\n    </View>\n  )\n\n}\n\n\nexport default CameraScreen\n\n// >>>>> Break >>>>>\n\n\n\n\n//   const [hasPermission, setHasPermission] = useState(\"\");\n//   const [type, setType] = useState(Camera.Constants.Type.back);\n\n//   useEffect(() => {\n  //     (async () => {\n    //       const { status } = await Camera.requestCameraPermissionsAsync();\n    //       if (status === 'granted') setHasPermission(\"Granted\");\n    //     })();\n    //   }, []);\n\n    \n    //   if (hasPermission === \"false\") {  // NB defunct atm\n    //     return <Text>No access to camera</Text>;\n    //   }\n    //   return (\n      //     <View style={styles.container}>\n      //       <Camera style={styles.camera} type={type}>\n//         <View style={styles.buttonContainer}>\n//           <TouchableOpacity\n//             style={styles.button}\n//             onPress={() => {\n//               setType(\n  //                 type === Camera.Constants.Type.back\n  //                   ? Camera.Constants.Type.front\n//                   : Camera.Constants.Type.back\n//               );\n//             }}>\n//             <Text style={styles.text}> Flip </Text>\n//           </TouchableOpacity>\n//         </View>\n//       </Camera>\n//     </View>\n//   );"]},"metadata":{},"sourceType":"module"}