{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useState, useEffect } from \"react\";\nimport { getPlants } from \"./utils/Api\";\nimport { ListItem, Avatar } from \"react-native-elements\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nvar SingleCategoryPlantScreen = function SingleCategoryPlantScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      plants = _useState2[0],\n      setPlants = _useState2[1];\n\n  var plantCategoryId = props.route.params.plantCategoryId;\n  useEffect(function () {\n    getPlants(plantCategoryId).then(function (response) {\n      setPlants(response);\n    }).catch(function (err) {\n      console.log(err, \"<-----err\");\n    });\n  }, []);\n\n  var renderItem = function renderItem(_ref) {\n    var plant = _ref.plant;\n    return React.createElement(ListItem, {\n      bottomDivider: true\n    }, React.createElement(Avatar, {\n      source: {\n        uri: plant.image_url\n      }\n    }), React.createElement(ListItem.Content, null, React.createElement(ListItem, {\n      key: i,\n      bottomDivider: true\n    }, React.createElement(ListItem.Title, null, plant.botanicalName), React.createElement(ListItem.Subtitle, null, plant.commonName))), React.createElement(ListItem.Chevron, null));\n  };\n\n  return React.createElement(FlatList, {\n    keyExtractor: keyExtractor,\n    data: plants,\n    renderItem: renderItem\n  });\n};\n\nvar styles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: \"column\",\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: \"grey\"\n  },\n  scrollView: {\n    backgroundColor: \"pink\",\n    marginHorizontal: 20\n  }\n});\nexport default SingleCategoryPlantScreen;","map":{"version":3,"sources":["/Users/philbulleyment/Documents/northcoders/projects/final-project/components/SingleCategoryPlantScreen.tsx"],"names":["React","useState","useEffect","getPlants","ListItem","Avatar","FlatList","SingleCategoryPlantScreen","props","plants","setPlants","plantCategoryId","route","params","then","response","catch","err","console","log","renderItem","plant","uri","image_url","i","botanicalName","commonName","keyExtractor","styles","StyleSheet","create","subtitleView","flexDirection","paddingLeft","paddingTop","ratingImage","height","width","ratingText","color","scrollView","backgroundColor","marginHorizontal"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,uBAAjC;AACA,SAASC,QAAT,QAAyB,8BAAzB;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,KAAD,EAAgB;AAChD,kBAA4BP,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOQ,MAAP;AAAA,MAAeC,SAAf;;AACA,MAAQC,eAAR,GAA4BH,KAAK,CAACI,KAAN,CAAYC,MAAxC,CAAQF,eAAR;AAEAT,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,SAAS,CAACQ,eAAD,CAAT,CACGG,IADH,CACQ,UAACC,QAAD,EAAc;AAClBL,MAAAA,SAAS,CAACK,QAAD,CAAT;AACD,KAHH,EAIGC,KAJH,CAIS,UAACC,GAAD,EAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,WAAjB;AACD,KANH;AAOD,GARQ,EAQN,EARM,CAAT;;AAUA,MAAMG,UAAU,GAAG,SAAbA,UAAa;AAAA,QAAGC,KAAH,QAAGA,KAAH;AAAA,WACjB,oBAAC,QAAD;AAAU,MAAA,aAAa;AAAvB,OAEE,oBAAC,MAAD;AAAQ,MAAA,MAAM,EAAE;AAAEC,QAAAA,GAAG,EAAED,KAAK,CAACE;AAAb;AAAhB,MAFF,EAGE,oBAAC,QAAD,CAAU,OAAV,QACA,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEC,CAAf;AAAkB,MAAA,aAAa;AAA/B,OACE,oBAAC,QAAD,CAAU,KAAV,QAAiBH,KAAK,CAACI,aAAvB,CADF,EAEE,oBAAC,QAAD,CAAU,QAAV,QAAoBJ,KAAK,CAACK,UAA1B,CAFF,CADA,CAHF,EASE,oBAAC,QAAD,CAAU,OAAV,OATF,CADiB;AAAA,GAAnB;;AAcA,SACE,oBAAC,QAAD;AACA,IAAA,YAAY,EAAEC,YADd;AAEA,IAAA,IAAI,EAAElB,MAFN;AAGA,IAAA,UAAU,EAAEW;AAHZ,IADF;AAOD,CAnCD;;AAqCA,IAAMQ,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,YAAY,EAAE;AACZC,IAAAA,aAAa,EAAE,QADH;AAEZC,IAAAA,WAAW,EAAE,EAFD;AAGZC,IAAAA,UAAU,EAAE;AAHA,GADiB;AAM/BC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,MAAM,EAAE,KAAV;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GANkB;AAO/BC,EAAAA,UAAU,EAAE;AAAEL,IAAAA,WAAW,EAAE,EAAf;AAAmBM,IAAAA,KAAK,EAAE;AAA1B,GAPmB;AAQ/BC,EAAAA,UAAU,EAAE;AACVC,IAAAA,eAAe,EAAE,MADP;AAEVC,IAAAA,gBAAgB,EAAE;AAFR;AARmB,CAAlB,CAAf;AAcA,eAAenC,yBAAf","sourcesContent":["import React from \"react\";\nimport { View, Text, ScrollView, StyleSheet } from \"react-native\";\nimport { useState, useEffect } from \"react\";\nimport { getPlants } from \"./utils/Api\";\nimport { ListItem, Avatar } from \"react-native-elements\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nconst SingleCategoryPlantScreen = (props: any) => {\n  const [plants, setPlants] = useState([]);\n  const { plantCategoryId } = props.route.params;\n\n  useEffect(() => {\n    getPlants(plantCategoryId)\n      .then((response) => {\n        setPlants(response);\n      })\n      .catch((err) => {\n        console.log(err, \"<-----err\");\n      });\n  }, []);\n\n  const renderItem = ({ plant }) => (\n    <ListItem bottomDivider>\n      \n      <Avatar source={{ uri: plant.image_url }} />\n      <ListItem.Content>\n      <ListItem key={i} bottomDivider>\n        <ListItem.Title>{plant.botanicalName}</ListItem.Title>\n        <ListItem.Subtitle>{plant.commonName}</ListItem.Subtitle>\n        </ListItem>\n      </ListItem.Content>\n      <ListItem.Chevron />\n    </ListItem>\n  );\n\n  return (\n    <FlatList\n    keyExtractor={keyExtractor}\n    data={plants}\n    renderItem={renderItem}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: \"column\",\n    paddingLeft: 10,\n    paddingTop: 5,\n  },\n  ratingImage: { height: 19.21, width: 100 },\n  ratingText: { paddingLeft: 10, color: \"grey\" },\n  scrollView: {\n    backgroundColor: \"pink\",\n    marginHorizontal: 20,\n  },\n});\n\nexport default SingleCategoryPlantScreen;\n"]},"metadata":{},"sourceType":"module"}