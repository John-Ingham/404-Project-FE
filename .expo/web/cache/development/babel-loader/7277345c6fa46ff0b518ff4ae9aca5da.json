{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { useState, useEffect } from \"react\";\nimport { getSinglePlant } from \"./utils/Api\";\nimport { Image } from 'react-native-elements';\n\nvar SingleLookedUpPlantScreen = function SingleLookedUpPlantScreen(props) {\n  var route = props.route;\n\n  var _useState = useState({}),\n      _useState2 = _slicedToArray(_useState, 2),\n      singlePlant = _useState2[0],\n      setSinglePlant = _useState2[1];\n\n  var commonName = props.route.params.commonName;\n  var imageSource = singlePlant.image_url;\n  console.log(imageSource);\n  useEffect(function () {\n    getSinglePlant(commonName).then(function (response) {\n      console.log(response, '<---response');\n      setSinglePlant(response);\n    }).catch(function (err) {\n      console.log(err, \"<-----err\");\n    });\n  }, []);\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Image, {\n    source: {\n      uri: imageSource\n    },\n    style: {\n      width: 300,\n      height: 300\n    },\n    PlaceholderContent: React.createElement(ActivityIndicator, null)\n  }), React.createElement(Text, null, \" \", singlePlant.commonName, \" \"), React.createElement(Text, null, \" \", singlePlant.botanicalName, \" \"), React.createElement(Text, null, \" \", singlePlant.description, \" \"));\n};\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: 'center'\n  },\n  header: {\n    flex: 1\n  },\n  section: {\n    flex: 3\n  }\n});\nexport default SingleLookedUpPlantScreen;","map":{"version":3,"sources":["/Users/philbulleyment/Documents/northcoders/projects/final-project/components/SingleLookedUpPlantScreen.tsx"],"names":["React","useState","useEffect","getSinglePlant","Image","SingleLookedUpPlantScreen","props","route","singlePlant","setSinglePlant","commonName","params","imageSource","image_url","console","log","then","response","catch","err","styles","container","uri","width","height","botanicalName","description","StyleSheet","create","flex","alignItems","header","section"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,cAAT;AACA,SAASC,KAAT,QAAsB,uBAAtB;;AAGA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,KAAD,EAAe;AAC/C,MAAOC,KAAP,GAAgBD,KAAhB,CAAOC,KAAP;;AACA,kBAAsCN,QAAQ,CAAC,EAAD,CAA9C;AAAA;AAAA,MAAOO,WAAP;AAAA,MAAoBC,cAApB;;AACA,MAAOC,UAAP,GAAqBJ,KAAK,CAACC,KAAN,CAAYI,MAAjC,CAAOD,UAAP;AAEA,MAAME,WAAW,GAAGJ,WAAW,CAACK,SAAhC;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,WAAZ;AAEAV,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,cAAc,CAACO,UAAD,CAAd,CACGM,IADH,CACQ,UAACC,QAAD,EAAc;AAClBH,MAAAA,OAAO,CAACC,GAAR,CAAYE,QAAZ,EAAsB,cAAtB;AACAR,MAAAA,cAAc,CAACQ,QAAD,CAAd;AAED,KALH,EAMGC,KANH,CAMS,UAACC,GAAD,EAAS;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ,EAAiB,WAAjB;AACD,KARH;AASD,GAVQ,EAUP,EAVO,CAAT;AAYE,SACI,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAGC,MAAM,CAACC;AAArB,KACA,oBAAC,KAAD;AAAQ,IAAA,MAAM,EAAG;AAACC,MAAAA,GAAG,EAACV;AAAL,KAAjB;AAAsC,IAAA,KAAK,EAAE;AAAEW,MAAAA,KAAK,EAAE,GAAT;AAAcC,MAAAA,MAAM,EAAE;AAAtB,KAA7C;AAA2E,IAAA,kBAAkB,EAAE,oBAAC,iBAAD;AAA/F,IADA,EAEA,oBAAC,IAAD,aAAQhB,WAAW,CAACE,UAApB,MAFA,EAGA,oBAAC,IAAD,aAAQF,WAAW,CAACiB,aAApB,MAHA,EAIA,oBAAC,IAAD,aAAQjB,WAAW,CAACkB,WAApB,MAJA,CADJ;AAQH,CA5BD;;AA8BA,IAAMN,MAAM,GAAGO,UAAU,CAACC,MAAX,CAAkB;AAC/BP,EAAAA,SAAS,EAAE;AACTQ,IAAAA,IAAI,EAAC,CADI;AAETC,IAAAA,UAAU,EAAE;AAFH,GADoB;AAM/BC,EAAAA,MAAM,EAAE;AACNF,IAAAA,IAAI,EAAE;AADA,GANuB;AAU/BG,EAAAA,OAAO,EAAE;AACPH,IAAAA,IAAI,EAAE;AADC;AAVsB,CAAlB,CAAf;AAgBA,eAAexB,yBAAf","sourcesContent":["import React from 'react';\nimport { View, Text, StyleSheet, ActivityIndicator } from \"react-native\";\nimport { useState, useEffect } from \"react\"\nimport { getSinglePlant } from './utils/Api';\nimport { Image } from 'react-native-elements';\n\n\nconst SingleLookedUpPlantScreen = (props:any) => {\n  const {route} = props\n  const [singlePlant, setSinglePlant] = useState({});\n  const {commonName} = props.route.params\n  \n  const imageSource = singlePlant.image_url\n  console.log(imageSource)\n\n  useEffect(() => {\n    getSinglePlant(commonName)\n      .then((response) => {\n        console.log(response, '<---response')\n        setSinglePlant(response);\n        \n      })\n      .catch((err) => {\n        console.log(err, \"<-----err\");\n      });\n  },[]);\n\n    return (\n        <View style={ styles.container}>\n        <Image  source={ {uri:imageSource} }  style={{ width: 300, height: 300 }}  PlaceholderContent={<ActivityIndicator />}/>\n        <Text> {singlePlant.commonName} </Text>\n        <Text> {singlePlant.botanicalName} </Text>\n        <Text> {singlePlant.description} </Text>\n      </View>\n    );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex:1,\n    alignItems: 'center',\n    \n  },\n  header: {\n    flex: 1,\n    \n  },\n  section: {\n    flex: 3,\n    \n  }\n})\n\nexport default SingleLookedUpPlantScreen"]},"metadata":{},"sourceType":"module"}