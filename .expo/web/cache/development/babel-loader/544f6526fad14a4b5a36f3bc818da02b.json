{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as ImagePicker from 'expo-image-picker';\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#354D2A',\n    padding: 20,\n    borderRadius: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain'\n  }\n});\n\nfunction CameraScreen() {\n  var _React$useState = React.useState({\n    localUri: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cameraRollImage = _React$useState2[0],\n      setCameraRollImage = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      cameraPhoto = _React$useState4[0],\n      setCameraPhoto = _React$useState4[1];\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionResult = _context.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert('Permission to access camera roll is required!');\n            return _context.abrupt(\"return\");\n\n          case 6:\n            _context.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context.next = 11;\n              break;\n            }\n\n            return _context.abrupt(\"return\");\n\n          case 11:\n            setCameraRollImage({\n              localUri: pickerResult.uri\n            });\n\n          case 12:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (cameraRollImage.localUri !== \"\") {\n    return React.createElement(View, {\n      style: {\n        flex: 1,\n        justifyContent: 'center',\n        alignItems: 'center'\n      }\n    }, React.createElement(Image, {\n      source: {\n        uri: cameraRollImage.localUri\n      },\n      style: styles.thumbnail\n    }), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return alert('Saved!');\n      },\n      style: styles.button\n    }, React.createElement(Text, null, \"Save chosen image\")));\n  }\n\n  return React.createElement(View, null, React.createElement(Text, null, \"Add a plant to your collection!\"), React.createElement(Text, null, \"Push button to select from camera roll \"), React.createElement(TouchableOpacity, {\n    onPress: openImagePickerAsync,\n    style: styles.button\n  }, React.createElement(Text, {\n    style: styles.buttonText\n  }, \"Pick a photo\")), React.createElement(Text, null, \" Push button to open camera\"), React.createElement(TouchableOpacity, {\n    onPress: function onPress() {\n      return alert('To add');\n    },\n    style: styles.button\n  }, React.createElement(Text, {\n    style: styles.buttonText\n  }, \"Pick a photo\")));\n}\n\nexport default CameraScreen;","map":{"version":3,"sources":["/home/john/northcoders/projects/404-Project-FE/components/CameraScreen.tsx"],"names":["React","ImagePicker","styles","StyleSheet","create","button","backgroundColor","padding","borderRadius","buttonText","fontSize","color","thumbnail","width","height","resizeMode","CameraScreen","useState","localUri","cameraRollImage","setCameraRollImage","cameraPhoto","setCameraPhoto","openImagePickerAsync","requestMediaLibraryPermissionsAsync","permissionResult","granted","alert","launchImageLibraryAsync","pickerResult","cancelled","uri","flex","justifyContent","alignItems"],"mappings":"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","sourcesContent":["import React from 'react';\nimport {useState} from 'react'\nimport { View, Text, Image, TouchableOpacity, StyleSheet } from \"react-native\";\nimport * as ImagePicker from 'expo-image-picker'\nimport {Camera} from 'expo-camera'\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#354D2A',\n    padding: 20,\n    borderRadius: 5,\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff',\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain', //useful line, makes the image not square if the selected image is not\n  },\n\n})\n\nfunction CameraScreen() {\n \n\n  const [cameraRollImage, setCameraRollImage] = React.useState({localUri:\"\"})\n  const [cameraPhoto, setCameraPhoto] = React.useState(null)\n\n  let openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync()\n\n    if (permissionResult.granted === false) {\n      alert('Permission to access camera roll is required!')\n      return\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync()\n    if (pickerResult.cancelled === true) {\n      return\n    }\n    setCameraRollImage({ localUri: pickerResult.uri })\n\n  }\n  \n  if (cameraRollImage.localUri !== \"\"){\n    return (\n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Image\n          source={{ uri: cameraRollImage.localUri }}\n          style={styles.thumbnail}\n        />\n        <TouchableOpacity\n          onPress={() => alert('Saved!')}\n          style={styles.button}\n        >\n\n        <Text>Save chosen image</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View >\n     \n      <Text >Add a plant to your collection!</Text>\n      {/* <Image source={} style={} /> */}\n      <Text>Push button to select from camera roll </Text>\n\n      <TouchableOpacity onPress={openImagePickerAsync} style={styles.button}>\n        <Text style={styles.buttonText}>Pick a photo</Text>\n      </TouchableOpacity>\n      <Text> Push button to open camera</Text>\n      <TouchableOpacity onPress={() => alert('To add')} style={styles.button}>\n        <Text style={styles.buttonText}>Pick a photo</Text>\n      </TouchableOpacity>\n    </View>\n  )\n  \n}\n\n\n  export default CameraScreen"]},"metadata":{},"sourceType":"module"}