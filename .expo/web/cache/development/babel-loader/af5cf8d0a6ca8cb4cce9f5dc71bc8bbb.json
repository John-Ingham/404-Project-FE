{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState, useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Camera } from 'expo-camera';\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#354D2A',\n    padding: 20,\n    borderRadius: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain'\n  },\n  container: {\n    flex: 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  cameraContainer: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  },\n  cameraButton: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 18,\n    color: 'white'\n  }\n});\n\nfunction CameraScreen() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      hasPermission = _useState2[0],\n      setHasPermission = _useState2[1];\n\n  var _useState3 = useState(Camera.Constants.Type.back),\n      _useState4 = _slicedToArray(_useState3, 2),\n      type = _useState4[0],\n      setType = _useState4[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              if (status === 'granted') setHasPermission(\"Granted\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  if (hasPermission === \"false\") {\n    return React.createElement(Text, null, \"No access to camera\");\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Camera, {\n    style: styles.camera,\n    type: type\n  }, React.createElement(View, {\n    style: styles.buttonContainer\n  }, React.createElement(TouchableOpacity, {\n    style: styles.button,\n    onPress: function onPress() {\n      setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n    }\n  }, React.createElement(Text, {\n    style: styles.text\n  }, \" Flip \")))));\n}\n\nexport default CameraScreen;","map":{"version":3,"sources":["/home/john/northcoders/projects/404-Project-FE/components/CameraScreen.tsx"],"names":["React","useState","useEffect","Camera","styles","StyleSheet","create","button","backgroundColor","padding","borderRadius","buttonText","fontSize","color","thumbnail","width","height","resizeMode","container","flex","alignItems","justifyContent","cameraContainer","camera","buttonContainer","flexDirection","margin","cameraButton","alignSelf","text","CameraScreen","hasPermission","setHasPermission","Constants","Type","back","type","setType","requestCameraPermissionsAsync","status","front"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport { View, Text, Image, TouchableOpacity, StyleSheet } from \"react-native\";\nimport * as ImagePicker from 'expo-image-picker'\nimport {Camera} from 'expo-camera'\n\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#354D2A',\n    padding: 20,\n    borderRadius: 5,\n    \n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff',\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain', //useful line, makes the image not square if the selected image is not\n  },\n  container: {\n    flex: 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // camera\n  cameraContainer: {\n    flex: 1,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20,\n  },\n  cameraButton: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 18,\n    color: 'white',\n  },\n\n})\n\nfunction CameraScreen() {\n \n  const [hasPermission, setHasPermission] = useState(\"\");\n  const [type, setType] = useState(Camera.Constants.Type.back);\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await Camera.requestCameraPermissionsAsync();\n      if (status === 'granted') setHasPermission(\"Granted\");\n    })();\n  }, []);\n\n  \n  if (hasPermission === \"false\") {  // NB defunct atm\n    return <Text>No access to camera</Text>;\n  }\n  return (\n    <View style={styles.container}>\n      <Camera style={styles.camera} type={type}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity\n            style={styles.button}\n            onPress={() => {\n              setType(\n                type === Camera.Constants.Type.back\n                  ? Camera.Constants.Type.front\n                  : Camera.Constants.Type.back\n              );\n            }}>\n            <Text style={styles.text}> Flip </Text>\n          </TouchableOpacity>\n        </View>\n      </Camera>\n    </View>\n  );\n  // >>>>> Break >>>>>\n\n//   const [cameraRollImage, setCameraRollImage] = React.useState({localUri:\"\"})\n//   const [cameraPhoto, setCameraPhoto] = React.useState(null)\n//   const [haveCameraPermission, setHaveCameraPermission] = React.useState(\"\")\n//   const [type, setType] = useState(Camera.Constants.Type.back);\n\n//   function cameraFunction() {\n//     return (\n//    <View style={styles.cameraContainer}>\n//      <Camera style={styles.camera} type={type}>\n//        <View style={styles.buttonContainer}>\n//          <TouchableOpacity\n//            style={styles.cameraButton}\n//            onPress={() => {\n//              setType(\n//                type === Camera.Constants.Type.back\n//                  ? Camera.Constants.Type.front\n//                  : Camera.Constants.Type.back\n//              );\n//            }}>\n//            <Text style={styles.text}> Flip </Text>\n//          </TouchableOpacity>\n//        </View>\n//      </Camera>\n//    </View>\n//  );\n//          }\n  \n\n//   let openCameraAsync = async () => {\n//     let cameraPermissionResult = await Camera.requestCameraPermissionsAsync()\n\n//     if (cameraPermissionResult.granted === false) {\n//       alert ('Permission to use camera is required!')\n//       return\n//     }\n    \n//     setHaveCameraPermission(\"Yes\")  \n//   }\n\n//   if (haveCameraPermission === \"Yes\") cameraFunction()\n  \n//   let openImagePickerAsync = async () => {\n//     let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync()\n\n//     if (permissionResult.granted === false) {\n//       alert('Permission to access camera roll is required!')\n//       return\n//     }\n\n//     let pickerResult = await ImagePicker.launchImageLibraryAsync()\n//     if (pickerResult.cancelled === true) {\n//       return\n//     }\n//     setCameraRollImage({ localUri: pickerResult.uri })\n\n//   }\n  \n//   if (cameraRollImage.localUri !== \"\"){\n//     return (\n//       <View style={styles.container}>\n//         <Image\n//           source={{ uri: cameraRollImage.localUri }}\n//           style={styles.thumbnail}\n//         />\n//         <TouchableOpacity\n//           onPress={() => alert('Saved!')}\n//           style={styles.button}\n//         >\n\n//         <Text style={styles.buttonText}>Save chosen image</Text>\n//         </TouchableOpacity>\n//       </View>\n//     );\n//   }\n\n//   return (\n//     <View style={styles.container}>\n     \n//       <Text >Add a plant to your collection!</Text>\n//       {/* <Image source={} style={} /> */}\n//       <Text>Push button to select from camera roll </Text>\n\n//       <TouchableOpacity onPress={openImagePickerAsync} style={styles.button}>\n//         <Text style={styles.buttonText}>Pick a photo</Text>\n//       </TouchableOpacity>\n//       <Text> Push button to open camera</Text>\n//       <TouchableOpacity onPress={openCameraAsync} style={styles.button}>\n//         <Text style={styles.buttonText}>Take a photo</Text>\n//       </TouchableOpacity>\n//     </View>\n//   )\n  \n}\n\n\n  export default CameraScreen"]},"metadata":{},"sourceType":"module"}