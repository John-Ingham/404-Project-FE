{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Camera } from 'expo-camera';\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#354D2A',\n    padding: 20,\n    borderRadius: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain'\n  },\n  container: {\n    flex: 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  }\n});\n\nfunction CameraScreen() {\n  var _React$useState = React.useState({\n    localUri: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cameraRollImage = _React$useState2[0],\n      setCameraRollImage = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      cameraPhoto = _React$useState4[0],\n      setCameraPhoto = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      haveCameraPermission = _React$useState6[0],\n      setHaveCameraPermission = _React$useState6[1];\n\n  useEffect(function () {\n    (function _callee() {\n      var _await$Camera$request, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n            case 2:\n              _await$Camera$request = _context.sent;\n              status = _await$Camera$request.status;\n              if (status === 'granted') setHaveCameraPermission(\"Granted\");\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n\n  var openCameraAsync = function openCameraAsync() {\n    var cameraPermissionResult;\n    return _regeneratorRuntime.async(function openCameraAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n          case 2:\n            cameraPermissionResult = _context2.sent;\n\n            if (!(cameraPermissionResult.granted === false)) {\n              _context2.next = 6;\n              break;\n            }\n\n            alert('Permission to use camera is required!');\n            return _context2.abrupt(\"return\");\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionResult = _context3.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context3.next = 6;\n              break;\n            }\n\n            alert('Permission to access camera roll is required!');\n            return _context3.abrupt(\"return\");\n\n          case 6:\n            _context3.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context3.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context3.next = 11;\n              break;\n            }\n\n            return _context3.abrupt(\"return\");\n\n          case 11:\n            setCameraRollImage({\n              localUri: pickerResult.uri\n            });\n\n          case 12:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (cameraRollImage.localUri !== \"\") {\n    return React.createElement(View, {\n      style: styles.container\n    }, React.createElement(Image, {\n      source: {\n        uri: cameraRollImage.localUri\n      },\n      style: styles.thumbnail\n    }), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return alert('Saved!');\n      },\n      style: styles.button\n    }, React.createElement(Text, {\n      style: styles.buttonText\n    }, \"Save chosen image\")));\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Text, null, \"Add a plant to your collection!\"), React.createElement(Text, null, \"Push button to select from camera roll \"), React.createElement(TouchableOpacity, {\n    onPress: openImagePickerAsync,\n    style: styles.button\n  }, React.createElement(Text, {\n    style: styles.buttonText\n  }, \"Pick a photo\")), React.createElement(Text, null, \" Push button to open camera\"), React.createElement(TouchableOpacity, {\n    onPress: openCameraAsync,\n    style: styles.button\n  }, React.createElement(Text, {\n    style: styles.buttonText\n  }, \"Pick a photo\")));\n}\n\nexport default CameraScreen;","map":{"version":3,"sources":["/home/john/northcoders/projects/404-Project-FE/components/CameraScreen.tsx"],"names":["React","useEffect","ImagePicker","Camera","styles","StyleSheet","create","button","backgroundColor","padding","borderRadius","buttonText","fontSize","color","thumbnail","width","height","resizeMode","container","flex","alignItems","justifyContent","CameraScreen","useState","localUri","cameraRollImage","setCameraRollImage","cameraPhoto","setCameraPhoto","haveCameraPermission","setHaveCameraPermission","requestCameraPermissionsAsync","status","openCameraAsync","cameraPermissionResult","granted","alert","openImagePickerAsync","requestMediaLibraryPermissionsAsync","permissionResult","launchImageLibraryAsync","pickerResult","cancelled","uri"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport { View, Text, Image, TouchableOpacity, StyleSheet } from \"react-native\";\nimport * as ImagePicker from 'expo-image-picker'\nimport {Camera} from 'expo-camera'\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#354D2A',\n    padding: 20,\n    borderRadius: 5,\n    \n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff',\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain', //useful line, makes the image not square if the selected image is not\n  },\n  container: {\n    flex: 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n\n})\n\nfunction CameraScreen() {\n \n\n  const [cameraRollImage, setCameraRollImage] = React.useState({localUri:\"\"})\n  const [cameraPhoto, setCameraPhoto] = React.useState(null)\n  const [haveCameraPermission, setHaveCameraPermission] = React.useState(\"\")\n\n  useEffect(() =>{\n  (async () => {\n      const { status } = await Camera.requestCameraPermissionsAsync();\n      if (status === 'granted') setHaveCameraPermission(\"Granted\");\n    })();\n  }, [])\n\n  let openCameraAsync = async () => {\n    let cameraPermissionResult = await Camera.requestCameraPermissionsAsync()\n\n    if (cameraPermissionResult.granted === false) {\n      alert ('Permission to use camera is required!')\n      return\n    }\n\n  }\n\n  let openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync()\n\n    if (permissionResult.granted === false) {\n      alert('Permission to access camera roll is required!')\n      return\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync()\n    if (pickerResult.cancelled === true) {\n      return\n    }\n    setCameraRollImage({ localUri: pickerResult.uri })\n\n  }\n  \n  if (cameraRollImage.localUri !== \"\"){\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{ uri: cameraRollImage.localUri }}\n          style={styles.thumbnail}\n        />\n        <TouchableOpacity\n          onPress={() => alert('Saved!')}\n          style={styles.button}\n        >\n\n        <Text style={styles.buttonText}>Save chosen image</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n     \n      <Text >Add a plant to your collection!</Text>\n      {/* <Image source={} style={} /> */}\n      <Text>Push button to select from camera roll </Text>\n\n      <TouchableOpacity onPress={openImagePickerAsync} style={styles.button}>\n        <Text style={styles.buttonText}>Pick a photo</Text>\n      </TouchableOpacity>\n      <Text> Push button to open camera</Text>\n      <TouchableOpacity onPress={openCameraAsync} style={styles.button}>\n        <Text style={styles.buttonText}>Pick a photo</Text>\n      </TouchableOpacity>\n    </View>\n  )\n  \n}\n\n\n  export default CameraScreen"]},"metadata":{},"sourceType":"module"}