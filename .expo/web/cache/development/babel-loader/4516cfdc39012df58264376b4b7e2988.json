{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport { useState } from \"react\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Searchbar } from \"react-native-paper\";\nimport Carousel, { Pagination } from \"react-native-snap-carousel\";\nimport { useFonts, Inter_900Black } from \"@expo-google-fonts/inter\";\n\nfunction SearchScreen(props) {\n  var navigation = props.navigation;\n\n  var _React$useState = React.useState(\"\"),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      searchQuery = _React$useState2[0],\n      setSearchQuery = _React$useState2[1];\n\n  var plantCategory = props.plantCategory,\n      setPlantCategory = props.setPlantCategory;\n\n  var onChangeSearch = function onChangeSearch(query) {\n    return setSearchQuery(query);\n  };\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      indexSelected = _useState2[0],\n      setIndexSelected = _useState2[1];\n\n  var _useFonts = useFonts({\n    Inter_900Black: Inter_900Black\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  var onSelect = function onSelect(indexSelected) {\n    setIndexSelected(indexSelected);\n  };\n\n  var handleOnPress = function handleOnPress(item) {\n    console.log(item.id);\n    setPlantCategory(item.id);\n    navigation.navigate(\"Single Plant Category\");\n  };\n\n  var _Dimensions$get = Dimensions.get(\"window\"),\n      width = _Dimensions$get.width;\n\n  var SPACING = 10;\n  var THUMB_SIZE = 80;\n  var IMAGES = {\n    image1: require(\"../assets/flowering-house-plants-1.jpg\"),\n    image2: require(\"../assets/foliage-house-plants-1.jpg\"),\n    image3: require(\"../assets/cacti-1.jpg\")\n  };\n\n  var _useState3 = useState([{\n    id: \"Foliage House Plants\",\n    image: IMAGES.image1\n  }, {\n    id: \"Flowering House Plants\",\n    image: IMAGES.image2\n  }, {\n    id: \"Cacti and Other Succulents\",\n    image: IMAGES.image3\n  }]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      images = _useState4[0],\n      setImages = _useState4[1];\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: \"flex-start\",\n      alignItems: \"center\"\n    }\n  }, React.createElement(Text, null, \"Search Data\"), React.createElement(Searchbar, {\n    style: styles.searchbar,\n    placeholder: \"Search\",\n    onChangeText: onChangeSearch,\n    value: searchQuery\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: \"center\"\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      marginTop: 20\n    }\n  }, React.createElement(Carousel, {\n    layout: \"default\",\n    data: images,\n    sliderWidth: width,\n    itemWidth: width,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item,\n          index = _ref.index;\n      return React.createElement(TouchableOpacity, {\n        onPress: function onPress(event) {\n          return handleOnPress(item);\n        }\n      }, React.createElement(Text, {\n        style: {\n          fontFamily: \"inter\",\n          fontSize: 30\n        }\n      }, item.id), React.createElement(Image, {\n        key: index,\n        style: {\n          width: \"100%\",\n          height: \"100%\"\n        },\n        resizeMode: \"contain\",\n        source: item.image\n      }));\n    },\n    onSnapToItem: function onSnapToItem(index) {\n      return onSelect(index);\n    }\n  }), React.createElement(View, {\n    style: {\n      marginTop: 20,\n      paddingHorizontal: 32,\n      alignSelf: \"flex-end\"\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: \"black\",\n      fontSize: 22\n    }\n  })), React.createElement(Pagination, {\n    inactiveDotColor: \"gray\",\n    dotColor: \"orange\",\n    activeDotIndex: indexSelected,\n    dotsLength: images.length,\n    animatedDuration: 150,\n    inactiveDotScale: 1\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"flex-start\",\n    backgroundColor: \"#ebebeb\"\n  },\n  text: {\n    color: \"#101010\",\n    fontSize: 24,\n    fontWeight: \"bold\"\n  },\n  buttonContainer: {\n    backgroundColor: \"#222\",\n    borderRadius: 5,\n    padding: 10,\n    margin: 20\n  },\n  buttonText: {\n    fontSize: 20,\n    color: \"#fff\"\n  },\n  searchbar: {\n    width: 300\n  },\n  categoryImage: {\n    width: 100,\n    height: 100\n  },\n  categoryPictureContainer: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\"\n  }\n});\nexport default SearchScreen;","map":{"version":3,"sources":["/Users/philbulleyment/Documents/northcoders/projects/final-project/components/SearchScreen.tsx"],"names":["React","useState","Searchbar","Carousel","Pagination","useFonts","Inter_900Black","SearchScreen","props","navigation","searchQuery","setSearchQuery","plantCategory","setPlantCategory","onChangeSearch","query","indexSelected","setIndexSelected","fontsLoaded","onSelect","handleOnPress","item","console","log","id","navigate","Dimensions","get","width","SPACING","THUMB_SIZE","IMAGES","image1","require","image2","image3","image","images","setImages","flex","justifyContent","alignItems","styles","searchbar","marginTop","index","event","fontFamily","fontSize","height","paddingHorizontal","alignSelf","color","length","StyleSheet","create","container","backgroundColor","text","fontWeight","buttonContainer","borderRadius","padding","margin","buttonText","categoryImage","categoryPictureContainer","flexDirection","flexWrap"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useRef } from \"react\";\nimport { getPlants } from \"./utils/Api\";\nimport {\n  TouchableOpacity,\n  View,\n  Text,\n  Image,\n  FlatList,\n  Dimensions,\n  StyleSheet,\n} from \"react-native\";\nimport { Searchbar } from \"react-native-paper\";\nimport Carousel, { Pagination } from \"react-native-snap-carousel\";\nimport { useFonts, Inter_900Black } from \"@expo-google-fonts/inter\";\n\nfunction SearchScreen(props: any) {\n  const { navigation } = props;\n  const [searchQuery, setSearchQuery] = React.useState(\"\");\n  const {plantCategory, setPlantCategory} = props;\n  const onChangeSearch = (query: string) => setSearchQuery(query);\n  const [indexSelected, setIndexSelected] = useState(0);\n\n  let [fontsLoaded] = useFonts({\n    Inter_900Black,\n  });\n\n  const onSelect = (indexSelected: number) => {\n    setIndexSelected(indexSelected);\n  };\n\n  const handleOnPress = (item: { id: string; image?: any }) => {\n    console.log(item.id);\n    setPlantCategory(item.id);\n    navigation.navigate(\"Single Plant Category\");\n  };\n\n  const { width } = Dimensions.get(\"window\");\n  const SPACING = 10;\n  const THUMB_SIZE = 80;\n\n  const IMAGES = {\n    image1: require(\"../assets/flowering-house-plants-1.jpg\"),\n    image2: require(\"../assets/foliage-house-plants-1.jpg\"),\n    image3: require(\"../assets/cacti-1.jpg\"),\n  };\n\n  const [images, setImages] = useState([\n    { id: \"Foliage House Plants\", image: IMAGES.image1 },\n    { id: \"Flowering House Plants\", image: IMAGES.image2 },\n    { id: \"Cacti and Other Succulents\", image: IMAGES.image3 },\n  ]);\n\n  return (\n    <View\n      style={{ flex: 1, justifyContent: \"flex-start\", alignItems: \"center\" }}\n    >\n      <Text>Search Data</Text>\n\n      <Searchbar\n        style={styles.searchbar}\n        placeholder=\"Search\"\n        onChangeText={onChangeSearch}\n        value={searchQuery}\n      />\n\n      <View style={{ flex: 1, alignItems: \"center\" }}>\n        {/* Title JSX Remains same */}\n        {/* Carousel View */}\n        <View style={{ flex: 1, marginTop: 20 }}>\n          <Carousel\n            layout=\"default\"\n            data={images}\n            sliderWidth={width}\n            itemWidth={width}\n            renderItem={({ item, index }) => (\n              <TouchableOpacity onPress={(event) => handleOnPress(item)}>\n                <Text style={{ fontFamily: \"inter\", fontSize: 30 }}>\n                  {item.id}\n                </Text>\n                <Image\n                  key={index}\n                  style={{ width: \"100%\", height: \"100%\" }}\n                  resizeMode=\"contain\"\n                  source={item.image}\n                />\n              </TouchableOpacity>\n            )}\n            onSnapToItem={(index) => onSelect(index)}\n          />\n          <View\n            style={{\n              marginTop: 20,\n              paddingHorizontal: 32,\n              alignSelf: \"flex-end\",\n            }}\n          >\n            <Text\n              style={{\n                color: \"black\",\n                fontSize: 22,\n              }}\n            >\n              {/* {indexSelected + 1}/{images.length} */}\n            </Text>\n          </View>\n          <Pagination\n            inactiveDotColor=\"gray\"\n            dotColor={\"orange\"}\n            activeDotIndex={indexSelected}\n            dotsLength={images.length}\n            animatedDuration={150}\n            inactiveDotScale={1}\n          />\n        </View>\n      </View>\n\n      {/* <View style={styles.categoryPictureContainer}>\n        <TouchableOpacity  style={styles.buttonContainer} onPress={handleOnPress}>  \n        <Image style={styles.categoryImage} name={'cat1'}source={require('../assets/cat1.jpg')}\n           />\n        </TouchableOpacity>\n\n        <TouchableOpacity style={styles.buttonContainer} onPress={() => navigation.navigate('Single Plant Category')} >  \n        <Image style={styles.categoryImage} source={require('../assets/cat1.jpg')} />\n        </TouchableOpacity>\n\n        \n<TouchableOpacity style={styles.buttonContainer} onPress={() => navigation.navigate('Single Plant Category')} >  \n        <Image style={styles.categoryImage} source={require('../assets/cat1.jpg')} />\n        </TouchableOpacity>\n\n        <TouchableOpacity style={styles.buttonContainer} onPress={() => navigation.navigate('Single Plant Category')}>  \n        <Image style={styles.categoryImage} source={require('../assets/cat1.jpg')} />\n        </TouchableOpacity>\n\n\n\n        </View> */}\n\n      {/* <TouchableOpacity style={styles.buttonContainer} onPress={getPlants}>  \n        <Text style={styles.buttonText}>All The Plants</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n        style={styles.buttonContainer}\n        onPress={() => navigation.navigate('Single Plant Category')}>\n        <Text style={styles.buttonText}>Single Plant Category</Text>\n      </TouchableOpacity>\n\n        \n        <TouchableOpacity\n        style={styles.buttonContainer}\n        onPress={() => navigation.navigate('Single Looked Up Plant')}>\n        <Text style={styles.buttonText}>Single Plant</Text>\n      </TouchableOpacity> */}\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    alignItems: \"flex-start\",\n    backgroundColor: \"#ebebeb\",\n  },\n  text: {\n    color: \"#101010\",\n    fontSize: 24,\n    fontWeight: \"bold\",\n  },\n  buttonContainer: {\n    backgroundColor: \"#222\",\n    borderRadius: 5,\n    padding: 10,\n    margin: 20,\n  },\n  buttonText: {\n    fontSize: 20,\n    color: \"#fff\",\n  },\n  searchbar: {\n    width: 300,\n  },\n  categoryImage: {\n    width: 100,\n    height: 100,\n  },\n  categoryPictureContainer: {\n    flexDirection: \"row\",\n    flexWrap: \"wrap\",\n    justifyContent: \"center\",\n  },\n});\n\nexport default SearchScreen;\n"]},"metadata":{},"sourceType":"module"}