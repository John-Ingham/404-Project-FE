{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useEffect } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport * as Brightness from \"expo-brightness\";\n\nfunction LightMeterScreen() {\n  useEffect(function () {\n    (function _callee() {\n      var _await$Brightness$req, status;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(Brightness.requestPermissionsAsync());\n\n            case 2:\n              _await$Brightness$req = _context.sent;\n              status = _await$Brightness$req.status;\n\n              if (!(status === 'granted')) {\n                _context.next = 6;\n                break;\n              }\n\n              return _context.abrupt(\"return\", React.createElement(View, null, React.createElement(Text, null, \" Inside granted block\"), React.createElement(Text, null, \" Brightness level is $\", Brightness)));\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, []);\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'center'\n    }\n  }, React.createElement(Text, null, \"Light Meter\"), React.createElement(Text, null, \"Lux meter, requires `sensors` functionality\"));\n}\n\nexport default LightMeterScreen;","map":{"version":3,"sources":["/home/john/northcoders/projects/404-Project-FE/components/LightMeterScreen.tsx"],"names":["React","useEffect","Brightness","LightMeterScreen","requestPermissionsAsync","status","flex","justifyContent","alignItems"],"mappings":";AAAA,OAAOA,KAAP,IAA6BC,SAA7B,QAA6C,OAA7C;;;AAIA,OAAO,KAAKC,UAAZ,MAA4B,iBAA5B;;AAMA,SAASC,gBAAT,GAA4B;AAE1BF,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAC0BC,UAAU,CAACE,uBAAX,EAD1B;;AAAA;AAAA;AACSC,cAAAA,MADT,yBACSA,MADT;;AAAA,oBAEKA,MAAM,KAAK,SAFhB;AAAA;AAAA;AAAA;;AAAA,+CAKK,oBAAC,IAAD,QACE,oBAAC,IAAD,gCADF,EAEE,oBAAC,IAAD,kCAA6BH,UAA7B,CAFF,CALL;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAaD,GAdQ,EAcN,EAdM,CAAT;AA4BE,SAEE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAE;AAAEI,MAAAA,IAAI,EAAE,CAAR;AAAWC,MAAAA,cAAc,EAAE,QAA3B;AAAqCC,MAAAA,UAAU,EAAE;AAAjD;AAAb,KACE,oBAAC,IAAD,sBADF,EAEE,oBAAC,IAAD,sDAFF,CAFF;AAQD;;AAED,eAAeL,gBAAf","sourcesContent":["import React, {EventEmitter, useEffect} from 'react';\n// import com.sensormanager.SensorManagerPackage\nimport { SensorManager } from 'react-native'\nimport{ Stylesheet, View, Text} from 'react-native'\nimport * as Brightness from \"expo-brightness\"\nimport { SYSTEM_BRIGHTNESS } from 'expo-permissions';\n\n\n\n\nfunction LightMeterScreen() {\n\n  useEffect(() => {\n    (async () => {\n      const { status } = await Brightness.requestPermissionsAsync();\n      if (status === 'granted') {\n        // Brightness.setSystemBrightnessAsync(1);\n        return (\n          <View>\n            <Text> Inside granted block</Text>\n            <Text> Brightness level is ${Brightness}</Text>\n          </View>\n        )\n      }\n      // console.log(Brightness, \"System Brightness  2\")\n    })();\n  }, []);\n// <><><><><><> Break\n\n  // SensorManager.startLightSensor(100)\n  // DeviceEventEmitter.addlistener(\"LightSensor\", function(data) {\n\n  // console.log(data)\n  // })\n  // const sensor = new AmbientLightSensor()\n  // sensor.onreading = () => console.log(sensor.illuminance)\n  // sensor.onerror = event => console.log(event.error.name, event.error.message)\n  // sensor.start()\n\n  // <><><><><><> Break\n    return (\n      \n      <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center' }}>\n        <Text>Light Meter</Text>\n        <Text>Lux meter, requires `sensors` functionality</Text>\n\n      </View>\n    );\n  }\n\n  export default LightMeterScreen"]},"metadata":{},"sourceType":"module"}