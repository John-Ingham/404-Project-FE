{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from 'react';\nimport { useState } from 'react';\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { Searchbar } from 'react-native-paper';\nimport Carousel, { Pagination } from 'react-native-snap-carousel';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\n\nfunction SearchScreen(props) {\n  var navigation = props.navigation;\n\n  var _React$useState = React.useState(''),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      searchQuery = _React$useState2[0],\n      setSearchQuery = _React$useState2[1];\n\n  var _React$useState3 = React.useState(''),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      plantCategory = _React$useState4[0],\n      setPlantCategory = _React$useState4[1];\n\n  var onChangeSearch = function onChangeSearch(query) {\n    return setSearchQuery(query);\n  };\n\n  var _useState = useState(0),\n      _useState2 = _slicedToArray(_useState, 2),\n      indexSelected = _useState2[0],\n      setIndexSelected = _useState2[1];\n\n  var _useFonts = useFonts({\n    Inter_900Black: Inter_900Black\n  }),\n      _useFonts2 = _slicedToArray(_useFonts, 1),\n      fontsLoaded = _useFonts2[0];\n\n  var onSelect = function onSelect(indexSelected) {\n    setIndexSelected(indexSelected);\n  };\n\n  var handleOnPress = function handleOnPress(item) {\n    console.log(item);\n    setPlantCategory(item);\n  };\n\n  var _Dimensions$get = Dimensions.get('window'),\n      width = _Dimensions$get.width;\n\n  var SPACING = 10;\n  var THUMB_SIZE = 80;\n  var IMAGES = {\n    image1: require(\"../assets/flowering-house-plants-1.jpg\"),\n    image2: require(\"../assets/foliage-house-plants-1.jpg\"),\n    image3: require(\"../assets/cacti-1.jpg\")\n  };\n\n  var _useState3 = useState([{\n    id: 'Foliage House Plants',\n    image: IMAGES.image1\n  }, {\n    id: 'Flowering House Plants',\n    image: IMAGES.image2\n  }, {\n    id: 'Cacti and Other Succulents',\n    image: IMAGES.image3\n  }]),\n      _useState4 = _slicedToArray(_useState3, 2),\n      images = _useState4[0],\n      setImages = _useState4[1];\n\n  return React.createElement(View, {\n    style: {\n      flex: 1,\n      justifyContent: 'flex-start',\n      alignItems: 'center'\n    }\n  }, React.createElement(Text, null, \"Search Data\"), React.createElement(Searchbar, {\n    style: styles.searchbar,\n    placeholder: \"Search\",\n    onChangeText: onChangeSearch,\n    value: searchQuery\n  }), React.createElement(View, {\n    style: {\n      flex: 1,\n      alignItems: 'center'\n    }\n  }, React.createElement(View, {\n    style: {\n      flex: 1,\n      marginTop: 20\n    }\n  }, React.createElement(Carousel, {\n    layout: \"default\",\n    data: images,\n    sliderWidth: width,\n    itemWidth: width,\n    renderItem: function renderItem(_ref) {\n      var item = _ref.item,\n          index = _ref.index;\n      return React.createElement(TouchableOpacity, {\n        onPress: handleOnPress(item)\n      }, React.createElement(Text, {\n        style: {\n          fontFamily: 'inter',\n          fontSize: 30\n        }\n      }, item.id), React.createElement(Image, {\n        key: index,\n        style: {\n          width: '100%',\n          height: '100%'\n        },\n        resizeMode: \"contain\",\n        source: item.image\n      }));\n    },\n    onSnapToItem: function onSnapToItem(index) {\n      return onSelect(index);\n    }\n  }), React.createElement(View, {\n    style: {\n      marginTop: 20,\n      paddingHorizontal: 32,\n      alignSelf: 'flex-end'\n    }\n  }, React.createElement(Text, {\n    style: {\n      color: 'black',\n      fontSize: 22\n    }\n  })), React.createElement(Pagination, {\n    inactiveDotColor: \"gray\",\n    dotColor: 'orange',\n    activeDotIndex: indexSelected,\n    dotsLength: images.length,\n    animatedDuration: 150,\n    inactiveDotScale: 1\n  }))));\n}\n\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: 'center',\n    alignItems: 'flex-start',\n    backgroundColor: '#ebebeb'\n  },\n  text: {\n    color: '#101010',\n    fontSize: 24,\n    fontWeight: 'bold'\n  },\n  buttonContainer: {\n    backgroundColor: '#222',\n    borderRadius: 5,\n    padding: 10,\n    margin: 20\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  searchbar: {\n    width: 300\n  },\n  categoryImage: {\n    width: 100,\n    height: 100\n  },\n  categoryPictureContainer: {\n    flexDirection: 'row',\n    flexWrap: 'wrap',\n    justifyContent: 'center'\n  }\n});\nexport default SearchScreen;","map":{"version":3,"sources":["/Users/philbulleyment/Documents/northcoders/projects/final-project/components/SearchScreen.tsx"],"names":["React","useState","Searchbar","Carousel","Pagination","useFonts","Inter_900Black","SearchScreen","props","navigation","searchQuery","setSearchQuery","plantCategory","setPlantCategory","onChangeSearch","query","indexSelected","setIndexSelected","fontsLoaded","onSelect","handleOnPress","item","console","log","Dimensions","get","width","SPACING","THUMB_SIZE","IMAGES","image1","require","image2","image3","id","image","images","setImages","flex","justifyContent","alignItems","styles","searchbar","marginTop","index","fontFamily","fontSize","height","paddingHorizontal","alignSelf","color","length","StyleSheet","create","container","backgroundColor","text","fontWeight","buttonContainer","borderRadius","padding","margin","buttonText","categoryImage","categoryPictureContainer","flexDirection","flexWrap"],"mappings":"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","sourcesContent":["import React from 'react';\nimport { useState, useRef } from 'react';\nimport { getPlants } from './utils/Api';\nimport { TouchableOpacity, View, Text, Image, FlatList, Dimensions, StyleSheet} from 'react-native';\nimport { Searchbar } from 'react-native-paper';\nimport Carousel, { Pagination } from 'react-native-snap-carousel';\nimport { useFonts, Inter_900Black } from '@expo-google-fonts/inter';\n\n\n\nfunction SearchScreen(props:any) {\n  const { navigation } = props\n  const [searchQuery, setSearchQuery] = React.useState('');\n  const [plantCategory, setPlantCategory] = React.useState('')\n  const onChangeSearch = (query:string) => setSearchQuery(query);\n  const [indexSelected, setIndexSelected] = useState(0);\n\n  let [fontsLoaded] = useFonts({\n    Inter_900Black,\n  });\n\n  const onSelect = (indexSelected:number) => {\n    setIndexSelected(indexSelected);\n  };\n\n  const handleOnPress = (item) => {\n    console.log(item)\n    setPlantCategory(item)\n  }\n  \n  const { width } = Dimensions.get('window');\n  const SPACING = 10;\n  const THUMB_SIZE = 80;\n  \n  const IMAGES = {\n    image1: require('../assets/flowering-house-plants-1.jpg'),\n    image2: require('../assets/foliage-house-plants-1.jpg'),\n    image3: require('../assets/cacti-1.jpg'),\n    \n  };\n\n\n  const [images, setImages] = useState([\n    { id: 'Foliage House Plants', image: IMAGES.image1 },\n    { id: 'Flowering House Plants', image: IMAGES.image2 },\n    { id: 'Cacti and Other Succulents', image: IMAGES.image3 },\n    \n  ]);\n\n  \n    return (\n      <View style={{ flex: 1, justifyContent: 'flex-start', alignItems: 'center' }}>\n        <Text>Search Data</Text>\n        \n        <Searchbar style={styles.searchbar}\n      placeholder=\"Search\"\n      onChangeText={onChangeSearch}\n      value={searchQuery}\n    />\n\n<View style={{ flex: 1, alignItems: 'center' }}>\n    {/* Title JSX Remains same */}\n    {/* Carousel View */}\n    <View style={{ flex: 1, marginTop: 20 }}>\n      <Carousel\n        layout='default'\n        data={images}\n        sliderWidth={width}\n        itemWidth={width}\n        \n        renderItem={({ item, index }) => (\n          <TouchableOpacity onPress={handleOnPress(item)}>  \n           <Text style={{fontFamily:'inter', fontSize:30}} >{item.id}</Text>\n          <Image\n            key={index}\n            style={{ width: '100%', height: '100%' }}\n            resizeMode='contain'\n            source={item.image}\n            \n          />\n         \n          </TouchableOpacity>\n        )}\n        \n        onSnapToItem={index => onSelect(index)}\n      />\n      <View\n  style={{\n    marginTop: 20,\n    paddingHorizontal: 32,\n    alignSelf: 'flex-end'\n  }}\n>\n  <Text\n    style={{\n      color: 'black',\n      fontSize: 22\n    }}\n  >\n    {/* {indexSelected + 1}/{images.length} */}\n  </Text>\n</View>\n      <Pagination\n    inactiveDotColor='gray'\n    dotColor={'orange'}\n    activeDotIndex={indexSelected}\n    dotsLength={images.length}\n    animatedDuration={150}\n    inactiveDotScale={1}\n  />\n    </View>\n  </View>\n\n    {/* <View style={styles.categoryPictureContainer}>\n        <TouchableOpacity  style={styles.buttonContainer} onPress={handleOnPress}>  \n        <Image style={styles.categoryImage} name={'cat1'}source={require('../assets/cat1.jpg')}\n           />\n        </TouchableOpacity>\n\n        <TouchableOpacity style={styles.buttonContainer} onPress={() => navigation.navigate('Single Plant Category')} >  \n        <Image style={styles.categoryImage} source={require('../assets/cat1.jpg')} />\n        </TouchableOpacity>\n\n        \n<TouchableOpacity style={styles.buttonContainer} onPress={() => navigation.navigate('Single Plant Category')} >  \n        <Image style={styles.categoryImage} source={require('../assets/cat1.jpg')} />\n        </TouchableOpacity>\n\n        <TouchableOpacity style={styles.buttonContainer} onPress={() => navigation.navigate('Single Plant Category')}>  \n        <Image style={styles.categoryImage} source={require('../assets/cat1.jpg')} />\n        </TouchableOpacity>\n\n\n\n        </View> */}\n\n        {/* <TouchableOpacity style={styles.buttonContainer} onPress={getPlants}>  \n        <Text style={styles.buttonText}>All The Plants</Text>\n        </TouchableOpacity>\n        \n        <TouchableOpacity\n        style={styles.buttonContainer}\n        onPress={() => navigation.navigate('Single Plant Category')}>\n        <Text style={styles.buttonText}>Single Plant Category</Text>\n      </TouchableOpacity>\n\n        \n        <TouchableOpacity\n        style={styles.buttonContainer}\n        onPress={() => navigation.navigate('Single Looked Up Plant')}>\n        <Text style={styles.buttonText}>Single Plant</Text>\n      </TouchableOpacity> */}\n\n     \n      </View>\n    );\n  }\n\n  const styles = StyleSheet.create({\n    container: {\n      flex: 1,\n      justifyContent: 'center',\n      alignItems: 'flex-start',\n      backgroundColor: '#ebebeb'\n    },\n    text: {\n      color: '#101010',\n      fontSize: 24,\n      fontWeight: 'bold'\n    },\n    buttonContainer: {\n      backgroundColor: '#222',\n      borderRadius: 5,\n      padding: 10,\n      margin: 20\n    },\n    buttonText: {\n      fontSize: 20,\n      color: '#fff'\n    },\n    searchbar: {\n      width: 300,\n    },\n    categoryImage: {\n      width: 100,\n      height: 100,\n      \n    },\n    categoryPictureContainer: {\n      flexDirection: 'row',\n      flexWrap: 'wrap',\n      justifyContent: 'center'\n    }\n  })\n\n  export default SearchScreen"]},"metadata":{},"sourceType":"module"}