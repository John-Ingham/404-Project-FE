{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport { useState, useContext, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { UserContext } from \"./utils/User\";\nimport { getUserPlantsFromDatabase } from \"./utils/Api\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport { ProgressBar } from \"react-native-paper\";\nimport { Avatar } from \"react-native-elements\";\nimport { useIsFocused } from \"@react-navigation/native\";\n\nfunction HomeScreen(props) {\n  var _useContext = useContext(UserContext),\n      userName = _useContext.userName,\n      setUserName = _useContext.setUserName;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      userPlants = _useState2[0],\n      setUserPlants = _useState2[1];\n\n  var navigation = props.navigation;\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedId = _useState4[0],\n      setSelectedId = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var isFocused = useIsFocused();\n  useEffect(function () {\n    setLoading(true);\n    getUserPlantsFromDatabase(userName).then(function (response) {\n      setUserPlants(response);\n      setLoading(false);\n    }).catch(function (err) {\n      console.log(err, \"<-----err\");\n    });\n  }, [isFocused]);\n\n  var handleOnPress = function handleOnPress(commonName) {\n    navigation.navigate();\n  };\n\n  var EmptyListMessage = function EmptyListMessage(_ref) {\n    var item = _ref.item;\n    return React.createElement(Text, {\n      onPress: function onPress() {\n        return getItem(item);\n      }\n    }, \"No Plants Yet......\");\n  };\n\n  var Item = function Item(_ref2) {\n    var item = _ref2.item,\n        onPress = _ref2.onPress,\n        backgroundColor = _ref2.backgroundColor,\n        textColor = _ref2.textColor;\n    return React.createElement(TouchableOpacity, {\n      onPress: onPress,\n      style: [styles.item, backgroundColor]\n    }, React.createElement(Text, {\n      style: [styles.title, textColor]\n    }, item.commonName), React.createElement(Text, {\n      style: [styles.subtitle, textColor]\n    }, item.botanicalName), React.createElement(Avatar, {\n      source: {\n        uri: item.image_url\n      }\n    }));\n  };\n\n  var renderItem = function renderItem(_ref3) {\n    var item = _ref3.item;\n    var backgroundColor = item.id === selectedId ? \"#6e3b6e\" : \"#dee5e5\";\n    var color = item.id === selectedId ? \"black\" : \"black\";\n    if (loading) return React.createElement(View, null, React.createElement(Text, null, \"loading...\"), React.createElement(ProgressBar, null));\n    return React.createElement(Item, {\n      item: item,\n      onPress: function onPress() {\n        return handleOnPress(item);\n      },\n      backgroundColor: {\n        backgroundColor: backgroundColor\n      },\n      textColor: {\n        color: color\n      }\n    });\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container\n  }, React.createElement(Text, {\n    style: styles.titletext\n  }, userName, \"'s plants...\"), React.createElement(FlatList, {\n    contentContainerStyle: styles.userPlantView,\n    numColumns: 2,\n    horizontal: false,\n    data: userPlants,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item, index) {\n      return String(index);\n    },\n    extraData: selectedId,\n    initialNumToRender: 5,\n    maxToRenderPerBatch: 1,\n    windowSize: 21,\n    ListEmptyComponent: EmptyListMessage\n  }));\n}\n\nvar styles = StyleSheet.create({\n  userPlantView: {\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: \"grey\"\n  },\n  scrollView: {\n    backgroundColor: \"#082d0fff\",\n    marginHorizontal: 20\n  },\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0\n  },\n  item: {\n    flex: 1 / 2,\n    padding: 10,\n    marginVertical: 8,\n    marginHorizontal: 20,\n    borderRadius: 10\n  },\n  title: {\n    fontSize: 15,\n    fontWeight: \"500\"\n  },\n  subtitle: {\n    fontSize: 15\n  },\n  titletext: {\n    fontSize: 25\n  },\n  logo: {}\n});\nexport default HomeScreen;","map":{"version":3,"sources":["/Users/philbulleyment/Documents/northcoders/projects/final-project/components/HomeScreen.tsx"],"names":["React","useState","useContext","useEffect","UserContext","getUserPlantsFromDatabase","FlatList","ProgressBar","Avatar","useIsFocused","HomeScreen","props","userName","setUserName","userPlants","setUserPlants","navigation","selectedId","setSelectedId","loading","setLoading","isFocused","then","response","catch","err","console","log","handleOnPress","commonName","navigate","EmptyListMessage","item","getItem","Item","onPress","backgroundColor","textColor","styles","title","subtitle","botanicalName","uri","image_url","renderItem","id","color","container","titletext","userPlantView","index","String","StyleSheet","create","paddingLeft","paddingTop","ratingImage","height","width","ratingText","scrollView","marginHorizontal","flex","marginTop","StatusBar","currentHeight","padding","marginVertical","borderRadius","fontSize","fontWeight","logo"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { Auth } from \"aws-amplify\";\nimport {\n  Text,\n  View,\n  TouchableOpacity,\n  StyleSheet,\n  ImageBackground,\n  SafeAreaView,\n  StatusBar,\n  Image,\n  ScrollView,\n} from \"react-native\";\nimport { Button, Card, Title, Paragraph } from \"react-native-paper\";\nimport { UserContext, UserProvider } from \"./utils/User\";\nimport { getUserFromDatabase, getUserPlantsFromDatabase } from \"./utils/Api\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport { ProgressBar, Colors } from \"react-native-paper\";\nimport { ListItem, Avatar } from \"react-native-elements\";\nimport { useIsFocused } from \"@react-navigation/native\";\n\nfunction HomeScreen(props: any) {\n  const { userName, setUserName } = useContext(UserContext);\n  const [userPlants, setUserPlants] = useState([]);\n  const { navigation } = props;\n  const [selectedId, setSelectedId] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const isFocused = useIsFocused();\n\n  useEffect(() => {\n    setLoading(true);\n    getUserPlantsFromDatabase(userName)\n      .then((response) => {\n        setUserPlants(response);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err, \"<-----err\");\n      });\n  }, [isFocused]);\n  \n\n  const handleOnPress = (commonName: string) => {\n    navigation.navigate();\n  };\n\n  const EmptyListMessage = ({ item }) => {\n    return (\n      // Flat List Item\n      <Text onPress={() => getItem(item)}>No Plants Yet......</Text>\n    );\n  };\n\n  const Item = ({ item, onPress, backgroundColor, textColor }) => (\n    <TouchableOpacity onPress={onPress} style={[styles.item, backgroundColor]}>\n      <Text style={[styles.title, textColor]}>{item.commonName}</Text>\n      <Text style={[styles.subtitle, textColor]}>{item.botanicalName}</Text>\n      <Avatar source={{ uri: item.image_url }} />\n    </TouchableOpacity>\n  );\n\n  const renderItem = ({ item }) => {\n    const backgroundColor = item.id === selectedId ? \"#6e3b6e\" : \"#dee5e5\";\n    const color = item.id === selectedId ? \"black\" : \"black\";\n\n    if (loading)\n      return (\n        <View>\n          <Text>loading...</Text>\n          <ProgressBar />\n        </View>\n      );\n\n    return (\n      <Item\n        item={item}\n        onPress={() => handleOnPress(item)}\n        backgroundColor={{ backgroundColor }}\n        textColor={{ color }}\n      />\n    );\n  };\n\n  return (\n    <SafeAreaView style={styles.container}>\n      <Text style={styles.titletext}>{userName}'s plants...</Text>\n\n      <FlatList\n        contentContainerStyle={styles.userPlantView}\n        numColumns={2}\n        horizontal={false}\n        data={userPlants}\n        renderItem={renderItem}\n        keyExtractor={(item, index) => String(index)}\n        extraData={selectedId}\n        initialNumToRender={5}\n        maxToRenderPerBatch={1}\n        windowSize={21}\n        ListEmptyComponent={EmptyListMessage}\n      />\n    </SafeAreaView>\n  );\n}\n\nconst styles = StyleSheet.create({\n  userPlantView: {\n    paddingLeft: 10,\n    paddingTop: 5,\n  },\n  ratingImage: { height: 19.21, width: 100 },\n  ratingText: { paddingLeft: 10, color: \"grey\" },\n  scrollView: {\n    backgroundColor: \"#082d0fff\",\n    marginHorizontal: 20,\n  },\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    flex: 1 / 2,\n    padding: 10,\n    marginVertical: 8,\n    marginHorizontal: 20,\n    borderRadius: 10,\n  },\n  title: {\n    fontSize: 15,\n    fontWeight: \"500\",\n  },\n  subtitle: {\n    fontSize: 15,\n  },\n  titletext: {\n    fontSize: 25,\n  },\n  logo: {},\n});\n\nexport default HomeScreen;\n"]},"metadata":{},"sourceType":"module"}