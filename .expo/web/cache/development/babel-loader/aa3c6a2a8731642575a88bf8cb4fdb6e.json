{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport { useState, useContext, useEffect } from \"react\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport { UserContext } from \"./utils/User\";\nimport { getUserPlantsFromDatabase } from \"./utils/Api\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport { ProgressBar } from \"react-native-paper\";\nimport { Avatar } from \"react-native-elements\";\n\nfunction HomeScreen(props) {\n  var _useContext = useContext(UserContext),\n      userName = _useContext.userName,\n      setUserName = _useContext.setUserName;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      userPlants = _useState2[0],\n      setUserPlants = _useState2[1];\n\n  var navigation = props.navigation;\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedId = _useState4[0],\n      setSelectedId = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  useEffect(function () {\n    setLoading(true);\n    getUserPlantsFromDatabase(userName).then(function (response) {\n      setUserPlants(response);\n      setLoading(false);\n    }).catch(function (err) {\n      console.log(err, \"<-----err\");\n    });\n  }, [userPlants]);\n\n  var handleOnPress = function handleOnPress(commonName) {\n    navigation.navigate();\n  };\n\n  var EmptyListMessage = function EmptyListMessage(_ref) {\n    var item = _ref.item;\n    return React.createElement(Text, {\n      style: styles.emptyListStyle,\n      onPress: function onPress() {\n        return getItem(item);\n      }\n    }, \"No Plants Yet......\");\n  };\n\n  var Item = function Item(_ref2) {\n    var item = _ref2.item,\n        onPress = _ref2.onPress,\n        backgroundColor = _ref2.backgroundColor,\n        textColor = _ref2.textColor;\n    return React.createElement(TouchableOpacity, {\n      onPress: onPress,\n      style: [styles.item, backgroundColor]\n    }, React.createElement(Text, {\n      style: [styles.title, textColor]\n    }, item.commonName), React.createElement(Text, {\n      style: [styles.subtitle, textColor]\n    }, item.botanicalName), React.createElement(Avatar, {\n      source: {\n        uri: item.image_url\n      }\n    }));\n  };\n\n  var renderItem = function renderItem(_ref3) {\n    var item = _ref3.item;\n    var backgroundColor = item.id === selectedId ? \"#6e3b6e\" : \"#dee5e5\";\n    var color = item.id === selectedId ? \"black\" : \"black\";\n    if (loading) return React.createElement(View, null, React.createElement(Text, null, \"loading...\"), React.createElement(ProgressBar, null));\n    return React.createElement(Item, {\n      item: item,\n      onPress: function onPress() {\n        return handleOnPress(item);\n      },\n      backgroundColor: {\n        backgroundColor: backgroundColor\n      },\n      textColor: {\n        color: color\n      }\n    });\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container\n  }, React.createElement(Image, {\n    style: styles.logo,\n    source: require(\"../assets/free-logo-1.jpg\")\n  }), React.createElement(Text, {\n    style: styles.titletext\n  }, userName, \"'s plants...\"), React.createElement(FlatList, {\n    contentContainerStyle: styles.userPlantView,\n    numColumns: 2,\n    horizontal: false,\n    data: userPlants,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item, index) {\n      return index;\n    },\n    extraData: selectedId,\n    initialNumToRender: 5,\n    maxToRenderPerBatch: 1,\n    windowSize: 21,\n    ListEmptyComponent: EmptyListMessage\n  }));\n}\n\n;\nvar styles = StyleSheet.create({\n  userPlantView: {\n    flex: 1,\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: \"grey\"\n  },\n  scrollView: {\n    backgroundColor: \"#082d0fff\",\n    marginHorizontal: 20\n  },\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0\n  },\n  item: {\n    flex: 1 / 2,\n    padding: 10,\n    marginVertical: 8,\n    marginHorizontal: 20,\n    borderRadius: 10\n  },\n  title: {\n    fontSize: 15,\n    fontWeight: \"500\"\n  },\n  subtitle: {\n    fontSize: 15\n  },\n  imagebackground: {\n    width: '100%',\n    height: '100%',\n    borderStyle: 'solid',\n    borderColor: 'grey',\n    borderWidth: 1\n  },\n  titletext: {\n    fontSize: 25\n  },\n  logo: {\n    flexGrow: 1 / 5,\n    justifyContent: 'center',\n    resizeMode: 'contain'\n  }\n});\nexport default HomeScreen;","map":{"version":3,"sources":["/Users/philbulleyment/Documents/northcoders/projects/final-project/components/HomeScreen.tsx"],"names":["React","useState","useContext","useEffect","UserContext","getUserPlantsFromDatabase","FlatList","ProgressBar","Avatar","HomeScreen","props","userName","setUserName","userPlants","setUserPlants","navigation","selectedId","setSelectedId","loading","setLoading","then","response","catch","err","console","log","handleOnPress","commonName","navigate","EmptyListMessage","item","styles","emptyListStyle","getItem","Item","onPress","backgroundColor","textColor","title","subtitle","botanicalName","uri","image_url","renderItem","id","color","container","logo","require","titletext","userPlantView","index","StyleSheet","create","flex","paddingLeft","paddingTop","ratingImage","height","width","ratingText","scrollView","marginHorizontal","marginTop","StatusBar","currentHeight","padding","marginVertical","borderRadius","fontSize","fontWeight","imagebackground","borderStyle","borderColor","borderWidth","flexGrow","justifyContent","resizeMode"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { Auth } from \"aws-amplify\";\nimport { Text, View, TouchableOpacity, StyleSheet, ImageBackground, SafeAreaView,StatusBar, Image } from \"react-native\";\nimport { Button, Card, Title, Paragraph } from 'react-native-paper';\nimport { UserContext, UserProvider } from \"./utils/User\";\nimport {getUserFromDatabase, getUserPlantsFromDatabase} from \"./utils/Api\"\nimport { FlatList } from \"react-native-gesture-handler\";\nimport { ProgressBar, Colors } from \"react-native-paper\";\nimport { ListItem, Avatar } from \"react-native-elements\";\n\nfunction HomeScreen(props: any) {\n  const { userName, setUserName } = useContext(UserContext);\n  const [userPlants, setUserPlants] = useState([])\n  const { navigation } = props;\n  const [selectedId, setSelectedId] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    getUserPlantsFromDatabase(userName)\n      .then((response) => {\n        setUserPlants(response);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err, \"<-----err\");\n      });\n  }, [userPlants]);\n\n  const handleOnPress = (commonName: string) => {\n    navigation.navigate();\n  };\n\n  const EmptyListMessage = ({item}) => {\n    return (\n      // Flat List Item\n      <Text\n        style={styles.emptyListStyle}\n        onPress={() => getItem(item)}>\n        No Plants Yet......\n      </Text>\n    );\n  };\n\n  const Item = ({ item, onPress, backgroundColor, textColor }) => (\n    <TouchableOpacity onPress={onPress} style={[styles.item, backgroundColor]}>\n      \n      <Text style={[styles.title, textColor]}>{item.commonName}</Text>\n      <Text style={[styles.subtitle, textColor]}>{item.botanicalName}</Text>\n      <Avatar source={{ uri: item.image_url }} />\n      \n    </TouchableOpacity>\n  );\n\n  const renderItem = ({ item }) => {\n    const backgroundColor = item.id === selectedId ? \"#6e3b6e\" : \"#dee5e5\";\n    const color = item.id === selectedId ? \"black\" : \"black\";\n\n    if (loading)\n      return (\n        <View>\n          <Text>loading...</Text>\n          <ProgressBar />\n        </View>\n      );\n\n    return (\n      \n      <Item\n        item={item}\n        onPress={() => handleOnPress(item)}\n        backgroundColor={{ backgroundColor }}\n        textColor={{ color }}\n      />\n    );\n  };\n  \n  return (\n    <SafeAreaView style={styles.container}>\n      <Image style={styles.logo} source={require('../assets/free-logo-1.jpg')} />\n      <Text style={styles.titletext}>{userName}'s plants...</Text>\n      \n      <FlatList\n        contentContainerStyle={styles.userPlantView}\n        numColumns={2}\n        horizontal={false}\n        data={userPlants}\n        renderItem={renderItem}\n        keyExtractor={(item,index) => index}\n        extraData={selectedId}\n        initialNumToRender={5}\n        maxToRenderPerBatch={1}\n        windowSize={21}\n        ListEmptyComponent={EmptyListMessage}\n      />\n      \n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  userPlantView: {\n    flex: 1,\n    paddingLeft: 10,\n    paddingTop: 5,\n    \n  },\n  ratingImage: { height: 19.21, width: 100 },\n  ratingText: { paddingLeft: 10, color: \"grey\" },\n  scrollView: {\n    backgroundColor: \"#082d0fff\",\n    marginHorizontal: 20,\n  },\n  container: {\n    flex: 1,\n    \n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    flex: 1/2,\n    padding: 10,\n    marginVertical: 8,\n    marginHorizontal: 20,\n    borderRadius: 10,\n    \n  },\n  title: {\n    \n    fontSize: 15,\n    fontWeight:\"500\"\n  },\n  subtitle: {\n    fontSize: 15,\n  },\n  imagebackground: {\n    width: '100%', \n    height: '100%', \n    borderStyle: 'solid', \n    borderColor: 'grey', \n    borderWidth: 1,\n  },\n  titletext: {\n    fontSize: 25,\n  },\n  logo: {\n    flexGrow: 1/5,\n    justifyContent: 'center',\n    resizeMode: 'contain',\n  }\n});\n\n\nexport default HomeScreen;\n"]},"metadata":{},"sourceType":"module"}