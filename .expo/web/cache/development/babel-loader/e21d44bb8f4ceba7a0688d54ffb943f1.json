{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport { useState, useEffect } from \"react\";\nimport { getPlants } from \"./utils/Api\";\nimport { Avatar } from \"react-native-elements\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport { ProgressBar } from \"react-native-paper\";\n\nvar SingleCategoryPlantScreen = function SingleCategoryPlantScreen(props) {\n  var navigation = props.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      plants = _useState2[0],\n      setPlants = _useState2[1];\n\n  var plantCategoryId = props.route.params.plantCategoryId;\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedId = _useState4[0],\n      setSelectedId = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  useEffect(function () {\n    setLoading(true);\n    getPlants(plantCategoryId).then(function (response) {\n      setPlants(response);\n      setLoading(false);\n    }).catch(function (err) {\n      console.log(err, \"<-----err\");\n    });\n  }, []);\n\n  var handleOnPress = function handleOnPress(commonName) {\n    navigation.navigate(\"Single Looked Up Plant\", commonName);\n  };\n\n  var Item = function Item(_ref) {\n    var item = _ref.item,\n        onPress = _ref.onPress,\n        backgroundColor = _ref.backgroundColor,\n        textColor = _ref.textColor;\n    return React.createElement(TouchableOpacity, {\n      onPress: onPress,\n      style: [styles.item, backgroundColor]\n    }, React.createElement(Text, {\n      style: [styles.title, textColor]\n    }, item.commonName), React.createElement(Text, {\n      style: [styles.subtitle, textColor]\n    }, item.botanicalName), React.createElement(Avatar, {\n      source: {\n        uri: item.image_url\n      }\n    }));\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    var backgroundColor = item.id === selectedId ? \"#6e3b6e\" : \"#d6d6d6\";\n    var color = item.id === selectedId ? \"white\" : \"black\";\n    if (loading) return React.createElement(View, null, React.createElement(Text, null, \"loading...\"), React.createElement(ProgressBar, null));\n    return React.createElement(Item, {\n      item: item,\n      onPress: function onPress() {\n        return handleOnPress(item);\n      },\n      backgroundColor: {\n        backgroundColor: backgroundColor\n      },\n      textColor: {\n        color: color\n      }\n    });\n  };\n\n  console.log(selectedId);\n  return React.createElement(SafeAreaView, {\n    style: styles.container\n  }, React.createElement(FlatList, {\n    contentContainerStyle: styles.subtitleView,\n    data: plants,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item) {\n      return item.botanicalName;\n    },\n    extraData: selectedId\n  }));\n};\n\nvar styles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: \"column\",\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: \"grey\"\n  },\n  scrollView: {\n    backgroundColor: \"white\",\n    marginHorizontal: 20\n  },\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0\n  },\n  item: {\n    flex: 1,\n    padding: 10,\n    marginVertical: 8,\n    marginHorizontal: 20,\n    borderRadius: 10\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\"\n  },\n  subtitle: {\n    fontSize: 10\n  }\n});\nexport default SingleCategoryPlantScreen;","map":{"version":3,"sources":["/Users/philbulleyment/Documents/northcoders/projects/final-project/components/SingleCategoryPlantScreen.tsx"],"names":["React","useState","useEffect","getPlants","Avatar","FlatList","ProgressBar","SingleCategoryPlantScreen","props","navigation","plants","setPlants","plantCategoryId","route","params","selectedId","setSelectedId","loading","setLoading","then","response","catch","err","console","log","handleOnPress","commonName","navigate","Item","item","onPress","backgroundColor","textColor","styles","title","subtitle","botanicalName","uri","image_url","renderItem","id","color","container","subtitleView","StyleSheet","create","flexDirection","paddingLeft","paddingTop","ratingImage","height","width","ratingText","scrollView","marginHorizontal","flex","marginTop","StatusBar","currentHeight","padding","marginVertical","borderRadius","fontSize","fontWeight"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  View,\n  Text,\n  ScrollView,\n  StyleSheet,\n  List,\n  SafeAreaView,\n  TouchableOpacity,\n  StatusBar,\n} from \"react-native\";\nimport { useState, useEffect } from \"react\";\nimport { getPlants } from \"./utils/Api\";\nimport { ListItem, Avatar } from \"react-native-elements\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport { ProgressBar, Colors } from \"react-native-paper\";\n\nconst SingleCategoryPlantScreen = (props: any) => {\n  const { navigation } = props;\n  const [plants, setPlants] = useState([]);\n  const { plantCategoryId } = props.route.params;\n  const [selectedId, setSelectedId] = useState(null);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    setLoading(true);\n    getPlants(plantCategoryId)\n      .then((response) => {\n        setPlants(response);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err, \"<-----err\");\n      });\n  }, []);\n\n  const handleOnPress = (commonName: string) => {\n    navigation.navigate(\"Single Looked Up Plant\", commonName);\n  };\n\n  const Item = ({ item, onPress, backgroundColor, textColor }) => (\n    <TouchableOpacity onPress={onPress} style={[styles.item, backgroundColor]}>\n      <Text style={[styles.title, textColor]}>{item.commonName}</Text>\n      <Text style={[styles.subtitle, textColor]}>{item.botanicalName}</Text>\n      <Avatar source={{ uri: item.image_url }} />\n    </TouchableOpacity>\n  );\n\n  const renderItem = ({ item }) => {\n    const backgroundColor = item.id === selectedId ? \"#6e3b6e\" : \"#d6d6d6\";\n    const color = item.id === selectedId ? \"white\" : \"black\";\n\n    if (loading)\n      return (\n        <View>\n          <Text>loading...</Text>\n          <ProgressBar />\n        </View>\n      );\n\n    return (\n      <Item\n        item={item}\n        onPress={() => handleOnPress(item)}\n        backgroundColor={{ backgroundColor }}\n        textColor={{ color }}\n      />\n    );\n  };\n  console.log(selectedId);\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        contentContainerStyle={styles.subtitleView}\n        data={plants}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.botanicalName}\n        extraData={selectedId}\n      />\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: \"column\",\n    paddingLeft: 10,\n    paddingTop: 5,\n  },\n  ratingImage: { height: 19.21, width: 100 },\n  ratingText: { paddingLeft: 10, color: \"grey\" },\n  scrollView: {\n    backgroundColor: \"white\",\n    marginHorizontal: 20,\n  },\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    flex: 1,\n    padding: 10,\n    marginVertical: 8,\n    marginHorizontal: 20,\n    borderRadius: 10,\n  },\n  title: {\n    fontSize: 20,\n    fontWeight: \"bold\",\n  },\n  subtitle: {\n    fontSize: 10,\n  },\n});\n\nexport default SingleCategoryPlantScreen;\n"]},"metadata":{},"sourceType":"module"}