{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport ScrollView from \"react-native-web/dist/exports/ScrollView\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport { useState, useContext, useEffect } from \"react\";\nimport { PlantCategoryContext, PlantCategoryProvider } from \"./utils/Context\";\nimport { getPlants } from \"./utils/Api\";\nimport { ListItem, Avatar } from \"react-native-elements\";\n\nvar SingleCategoryPlantScreen = function SingleCategoryPlantScreen(props) {\n  var _useContext = useContext(PlantCategoryContext),\n      plantCategory = _useContext.plantCategory,\n      setPlantCategory = _useContext.setPlantCategory;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      plants = _useState2[0],\n      setPlants = _useState2[1];\n\n  console.log(plantCategory, '<----props?');\n  useEffect(function () {\n    getPlants(plantCategory).then(function (response) {\n      setPlants(response);\n    }).catch(function (err) {\n      console.log(err, \"<-----err\");\n    }, []);\n  });\n  return React.createElement(PlantCategoryProvider, null, React.createElement(View, {\n    style: styles.subtitleView\n  }, React.createElement(ScrollView, {\n    style: styles.scrollView\n  }, plants.map(function (plant, i) {\n    return React.createElement(ListItem, {\n      key: i,\n      bottomDivider: true\n    }, React.createElement(Avatar, {\n      source: {\n        uri: plant.image_url\n      }\n    }), React.createElement(ListItem.Content, null, React.createElement(ListItem.Title, null, plant.botanicalName), React.createElement(ListItem.Subtitle, null, plant.commonName)));\n  }))));\n};\n\nvar styles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: \"column\",\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: \"grey\"\n  },\n  scrollView: {\n    backgroundColor: 'pink',\n    marginHorizontal: 20\n  }\n});\nexport default SingleCategoryPlantScreen;","map":{"version":3,"sources":["/Users/philbulleyment/Documents/northcoders/projects/final-project/components/SingleCategoryPlantScreen.tsx"],"names":["React","useState","useContext","useEffect","PlantCategoryContext","PlantCategoryProvider","getPlants","ListItem","Avatar","SingleCategoryPlantScreen","props","plantCategory","setPlantCategory","plants","setPlants","console","log","then","response","catch","err","styles","subtitleView","scrollView","map","plant","i","uri","image_url","botanicalName","commonName","StyleSheet","create","flexDirection","paddingLeft","paddingTop","ratingImage","height","width","ratingText","color","backgroundColor","marginHorizontal"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;;AAEA,SAASC,QAAT,EAA2BC,UAA3B,EAAuCC,SAAvC,QAAwD,OAAxD;AACA,SAASC,oBAAT,EAA+BC,qBAA/B;AACA,SAASC,SAAT;AACA,SAASC,QAAT,EAAmBC,MAAnB,QAAiC,uBAAjC;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,KAAD,EAAgB;AAChD,oBAA4CR,UAAU,CAACE,oBAAD,CAAtD;AAAA,MAAQO,aAAR,eAAQA,aAAR;AAAA,MAAuBC,gBAAvB,eAAuBA,gBAAvB;;AACA,kBAA4BX,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOY,MAAP;AAAA,MAAeC,SAAf;;AAQAC,EAAAA,OAAO,CAACC,GAAR,CAAYL,aAAZ,EAA0B,aAA1B;AAEAR,EAAAA,SAAS,CAAC,YAAM;AACdG,IAAAA,SAAS,CAACK,aAAD,CAAT,CACGM,IADH,CACQ,UAACC,QAAD,EAAc;AAClBJ,MAAAA,SAAS,CAACI,QAAD,CAAT;AAED,KAJH,EAKGC,KALH,CAKS,UAACC,GAAD,EAAS;AACdL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ,EAAiB,WAAjB;AACD,KAPH,EAOK,EAPL;AAQD,GATQ,CAAT;AAWA,SACE,oBAAC,qBAAD,QACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACC;AAApB,KACA,oBAAC,UAAD;AAAY,IAAA,KAAK,EAAED,MAAM,CAACE;AAA1B,KACGV,MAAM,CAACW,GAAP,CAAW,UAACC,KAAD,EAAQC,CAAR;AAAA,WACV,oBAAC,QAAD;AAAU,MAAA,GAAG,EAAEA,CAAf;AAAkB,MAAA,aAAa;AAA/B,OACE,oBAAC,MAAD;AAAQ,MAAA,MAAM,EAAE;AAAEC,QAAAA,GAAG,EAAEF,KAAK,CAACG;AAAb;AAAhB,MADF,EAEE,oBAAC,QAAD,CAAU,OAAV,QACE,oBAAC,QAAD,CAAU,KAAV,QAAiBH,KAAK,CAACI,aAAvB,CADF,EAEE,oBAAC,QAAD,CAAU,QAAV,QAAoBJ,KAAK,CAACK,UAA1B,CAFF,CAFF,CADU;AAAA,GAAX,CADH,CADA,CADF,CADF;AAkBD,CAzCD;;AA2CA,IAAMT,MAAM,GAAGU,UAAU,CAACC,MAAX,CAAkB;AAC/BV,EAAAA,YAAY,EAAE;AAEZW,IAAAA,aAAa,EAAE,QAFH;AAEaC,IAAAA,WAAW,EAAE,EAF1B;AAE8BC,IAAAA,UAAU,EAAE;AAF1C,GADiB;AAI/BC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,MAAM,EAAE,KAAV;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAJkB;AAK/BC,EAAAA,UAAU,EAAE;AAAEL,IAAAA,WAAW,EAAE,EAAf;AAAmBM,IAAAA,KAAK,EAAE;AAA1B,GALmB;AAM/BjB,EAAAA,UAAU,EAAE;AACVkB,IAAAA,eAAe,EAAE,MADP;AAEVC,IAAAA,gBAAgB,EAAE;AAFR;AANmB,CAAlB,CAAf;AAYA,eAAejC,yBAAf","sourcesContent":["import React from \"react\";\nimport { View, Text, ScrollView, StyleSheet } from \"react-native\";\nimport { useState, useRef, useContext, useEffect } from \"react\";\nimport { PlantCategoryContext, PlantCategoryProvider } from \"./utils/Context\";\nimport { getPlants } from \"./utils/Api\";\nimport { ListItem, Avatar } from \"react-native-elements\";\n\nconst SingleCategoryPlantScreen = (props: any) => {\n  const { plantCategory, setPlantCategory } = useContext(PlantCategoryContext);\n  const [plants, setPlants] = useState([]);\n  // interface IMyPlantCategoryProps {\n  //   plantCategory: string;\n  //   setPlantCategory: (newPlantCategory: string) => void;\n  // }\n\n  //const {route} = props\n  //const {plantCategory, setPlantCategory} = props;\n  console.log(plantCategory,'<----props?')\n\n  useEffect(() => {\n    getPlants(plantCategory)\n      .then((response) => {\n        setPlants(response);\n        //console.log(response)\n      })\n      .catch((err) => {\n        console.log(err, \"<-----err\");\n      }, []);\n  });\n\n  return (\n    <PlantCategoryProvider>\n      <View style={styles.subtitleView}>\n      <ScrollView style={styles.scrollView}>\n        {plants.map((plant, i) => (\n          <ListItem key={i} bottomDivider>\n            <Avatar source={{ uri: plant.image_url }} />\n            <ListItem.Content>\n              <ListItem.Title>{plant.botanicalName}</ListItem.Title>\n              <ListItem.Subtitle>{plant.commonName}</ListItem.Subtitle>\n            </ListItem.Content>\n          </ListItem>\n        ))}\n        </ScrollView>\n      </View>\n      \n    </PlantCategoryProvider>\n  );\n};\n\nconst styles = StyleSheet.create({\n  subtitleView: {\n    \n    flexDirection: \"column\", paddingLeft: 10, paddingTop: 5 },\n  ratingImage: { height: 19.21, width: 100 },\n  ratingText: { paddingLeft: 10, color: \"grey\" },\n  scrollView: {\n    backgroundColor: 'pink',\n    marginHorizontal: 20,\n  },\n});\n\nexport default SingleCategoryPlantScreen;\n"]},"metadata":{},"sourceType":"module"}