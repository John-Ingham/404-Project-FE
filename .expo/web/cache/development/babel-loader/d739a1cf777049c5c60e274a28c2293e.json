{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport { useState, useEffect } from \"react\";\nimport { getPlants } from \"./utils/Api\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nvar SingleCategoryPlantScreen = function SingleCategoryPlantScreen(props) {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      plants = _useState2[0],\n      setPlants = _useState2[1];\n\n  var plantCategoryId = props.route.params.plantCategoryId;\n  useEffect(function () {\n    getPlants(plantCategoryId).then(function (response) {\n      setPlants(response);\n    }).catch(function (err) {\n      console.log(err, \"<-----err\");\n    });\n  }, []);\n\n  var renderItem = function renderItem(_ref) {\n    var item = _ref.item;\n    var backgroundColor = item.id === selectedId ? \"#6e3b6e\" : \"#f9c2ff\";\n    var color = item.id === selectedId ? 'white' : 'black';\n    return React.createElement(Item, {\n      item: item,\n      onPress: function onPress() {\n        return setSelectedId(item.id);\n      },\n      backgroundColor: {\n        backgroundColor: backgroundColor\n      },\n      textColor: {\n        color: color\n      }\n    });\n  };\n\n  return React.createElement(SafeAreaView, {\n    style: styles.container\n  }, React.createElement(FlatList, {\n    data: plants,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item) {\n      return item.id;\n    },\n    extraData: selectedId\n  }));\n};\n\nvar styles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: \"column\",\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: \"grey\"\n  },\n  scrollView: {\n    backgroundColor: 'pink',\n    marginHorizontal: 20\n  }\n});\nexport default SingleCategoryPlantScreen;","map":{"version":3,"sources":["/Users/philbulleyment/Documents/northcoders/projects/final-project/components/SingleCategoryPlantScreen.tsx"],"names":["React","useState","useEffect","getPlants","FlatList","SingleCategoryPlantScreen","props","plants","setPlants","plantCategoryId","route","params","then","response","catch","err","console","log","renderItem","item","backgroundColor","id","selectedId","color","setSelectedId","styles","container","StyleSheet","create","subtitleView","flexDirection","paddingLeft","paddingTop","ratingImage","height","width","ratingText","scrollView","marginHorizontal"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,SAASC,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;AACA,SAASC,SAAT;AAEA,SAASC,QAAT,QAAyB,8BAAzB;;AAEA,IAAMC,yBAAyB,GAAG,SAA5BA,yBAA4B,CAACC,KAAD,EAAgB;AAChD,kBAA4BL,QAAQ,CAAC,EAAD,CAApC;AAAA;AAAA,MAAOM,MAAP;AAAA,MAAeC,SAAf;;AACA,MAAOC,eAAP,GAA0BH,KAAK,CAACI,KAAN,CAAYC,MAAtC,CAAOF,eAAP;AAEAP,EAAAA,SAAS,CAAC,YAAM;AACdC,IAAAA,SAAS,CAACM,eAAD,CAAT,CACGG,IADH,CACQ,UAACC,QAAD,EAAc;AAClBL,MAAAA,SAAS,CAACK,QAAD,CAAT;AACD,KAHH,EAIGC,KAJH,CAIS,UAACC,GAAD,EAAS;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ,EAAiB,WAAjB;AACD,KANH;AAOD,GARQ,EAQP,EARO,CAAT;;AAUA,MAAMG,UAAU,GAAG,SAAbA,UAAa,OAAc;AAAA,QAAXC,IAAW,QAAXA,IAAW;AAC/B,QAAMC,eAAe,GAAGD,IAAI,CAACE,EAAL,KAAYC,UAAZ,GAAyB,SAAzB,GAAqC,SAA7D;AACA,QAAMC,KAAK,GAAGJ,IAAI,CAACE,EAAL,KAAYC,UAAZ,GAAyB,OAAzB,GAAmC,OAAjD;AAEA,WACE,oBAAC,IAAD;AACE,MAAA,IAAI,EAAEH,IADR;AAEE,MAAA,OAAO,EAAE;AAAA,eAAMK,aAAa,CAACL,IAAI,CAACE,EAAN,CAAnB;AAAA,OAFX;AAGE,MAAA,eAAe,EAAE;AAAED,QAAAA,eAAe,EAAfA;AAAF,OAHnB;AAIE,MAAA,SAAS,EAAE;AAAEG,QAAAA,KAAK,EAALA;AAAF;AAJb,MADF;AAQD,GAZD;;AAcA,SAEI,oBAAC,YAAD;AAAc,IAAA,KAAK,EAAEE,MAAM,CAACC;AAA5B,KACA,oBAAC,QAAD;AACE,IAAA,IAAI,EAAEnB,MADR;AAEE,IAAA,UAAU,EAAEW,UAFd;AAGE,IAAA,YAAY,EAAE,sBAACC,IAAD;AAAA,aAAUA,IAAI,CAACE,EAAf;AAAA,KAHhB;AAIE,IAAA,SAAS,EAAEC;AAJb,IADA,CAFJ;AAaD,CAzCD;;AA2CA,IAAMG,MAAM,GAAGE,UAAU,CAACC,MAAX,CAAkB;AAC/BC,EAAAA,YAAY,EAAE;AAEZC,IAAAA,aAAa,EAAE,QAFH;AAEaC,IAAAA,WAAW,EAAE,EAF1B;AAE8BC,IAAAA,UAAU,EAAE;AAF1C,GADiB;AAI/BC,EAAAA,WAAW,EAAE;AAAEC,IAAAA,MAAM,EAAE,KAAV;AAAiBC,IAAAA,KAAK,EAAE;AAAxB,GAJkB;AAK/BC,EAAAA,UAAU,EAAE;AAAEL,IAAAA,WAAW,EAAE,EAAf;AAAmBR,IAAAA,KAAK,EAAE;AAA1B,GALmB;AAM/Bc,EAAAA,UAAU,EAAE;AACVjB,IAAAA,eAAe,EAAE,MADP;AAEVkB,IAAAA,gBAAgB,EAAE;AAFR;AANmB,CAAlB,CAAf;AAYA,eAAejC,yBAAf","sourcesContent":["import React from \"react\";\nimport { View, Text, ScrollView, StyleSheet, List, SafeAreaView } from \"react-native\";\nimport { useState, useEffect } from \"react\";\nimport { getPlants } from \"./utils/Api\";\nimport { ListItem, Avatar } from \"react-native-elements\";\nimport { FlatList } from \"react-native-gesture-handler\";\n\nconst SingleCategoryPlantScreen = (props: any) => {\n  const [plants, setPlants] = useState([]);\n  const {plantCategoryId} = props.route.params\n\n  useEffect(() => {\n    getPlants(plantCategoryId)\n      .then((response) => {\n        setPlants(response);\n      })\n      .catch((err) => {\n        console.log(err, \"<-----err\");\n      });\n  },[]);\n\n  const renderItem = ({ item }) => {\n    const backgroundColor = item.id === selectedId ? \"#6e3b6e\" : \"#f9c2ff\";\n    const color = item.id === selectedId ? 'white' : 'black';\n\n    return (\n      <Item\n        item={item}\n        onPress={() => setSelectedId(item.id)}\n        backgroundColor={{ backgroundColor }}\n        textColor={{ color }}\n      />\n    );\n  };\n  \n  return (\n    \n      <SafeAreaView style={styles.container}>\n      <FlatList\n        data={plants}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.id}\n        extraData={selectedId}\n      />\n    </SafeAreaView>\n      \n    \n  );\n};\n\nconst styles = StyleSheet.create({\n  subtitleView: {\n    \n    flexDirection: \"column\", paddingLeft: 10, paddingTop: 5 },\n  ratingImage: { height: 19.21, width: 100 },\n  ratingText: { paddingLeft: 10, color: \"grey\" },\n  scrollView: {\n    backgroundColor: 'pink',\n    marginHorizontal: 20,\n  },\n});\n\nexport default SingleCategoryPlantScreen;\n"]},"metadata":{},"sourceType":"module"}