{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { createPermissionHook, PermissionStatus, UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExpoBrightness from \"./ExpoBrightness\";\nexport var BrightnessMode;\n\n(function (BrightnessMode) {\n  BrightnessMode[BrightnessMode[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  BrightnessMode[BrightnessMode[\"AUTOMATIC\"] = 1] = \"AUTOMATIC\";\n  BrightnessMode[BrightnessMode[\"MANUAL\"] = 2] = \"MANUAL\";\n})(BrightnessMode || (BrightnessMode = {}));\n\nexport { PermissionStatus };\nexport function isAvailableAsync() {\n  return _regeneratorRuntime.async(function isAvailableAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", !!ExpoBrightness.getBrightnessAsync);\n\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getBrightnessAsync() {\n  return _regeneratorRuntime.async(function getBrightnessAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (ExpoBrightness.getBrightnessAsync) {\n            _context2.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-brightness', 'getBrightnessAsync');\n\n        case 2:\n          _context2.next = 4;\n          return _regeneratorRuntime.awrap(ExpoBrightness.getBrightnessAsync());\n\n        case 4:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setBrightnessAsync(brightnessValue) {\n  var clampedBrightnessValue;\n  return _regeneratorRuntime.async(function setBrightnessAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          if (ExpoBrightness.setBrightnessAsync) {\n            _context3.next = 2;\n            break;\n          }\n\n          throw new UnavailabilityError('expo-brightness', 'setBrightnessAsync');\n\n        case 2:\n          clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n\n          if (!isNaN(clampedBrightnessValue)) {\n            _context3.next = 5;\n            break;\n          }\n\n          throw new TypeError(\"setBrightnessAsync cannot be called with \" + brightnessValue);\n\n        case 5:\n          _context3.next = 7;\n          return _regeneratorRuntime.awrap(ExpoBrightness.setBrightnessAsync(clampedBrightnessValue));\n\n        case 7:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 8:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getSystemBrightnessAsync() {\n  return _regeneratorRuntime.async(function getSystemBrightnessAsync$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context4.next = 4;\n            break;\n          }\n\n          _context4.next = 3;\n          return _regeneratorRuntime.awrap(getBrightnessAsync());\n\n        case 3:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 4:\n          _context4.next = 6;\n          return _regeneratorRuntime.awrap(ExpoBrightness.getSystemBrightnessAsync());\n\n        case 6:\n          return _context4.abrupt(\"return\", _context4.sent);\n\n        case 7:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setSystemBrightnessAsync(brightnessValue) {\n  var clampedBrightnessValue;\n  return _regeneratorRuntime.async(function setSystemBrightnessAsync$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n\n          if (!isNaN(clampedBrightnessValue)) {\n            _context5.next = 3;\n            break;\n          }\n\n          throw new TypeError(\"setSystemBrightnessAsync cannot be called with \" + brightnessValue);\n\n        case 3:\n          if (!(Platform.OS !== 'android')) {\n            _context5.next = 7;\n            break;\n          }\n\n          _context5.next = 6;\n          return _regeneratorRuntime.awrap(setBrightnessAsync(clampedBrightnessValue));\n\n        case 6:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 7:\n          _context5.next = 9;\n          return _regeneratorRuntime.awrap(ExpoBrightness.setSystemBrightnessAsync(clampedBrightnessValue));\n\n        case 9:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 10:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function useSystemBrightnessAsync() {\n  return _regeneratorRuntime.async(function useSystemBrightnessAsync$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context6.next = 2;\n            break;\n          }\n\n          return _context6.abrupt(\"return\");\n\n        case 2:\n          _context6.next = 4;\n          return _regeneratorRuntime.awrap(ExpoBrightness.useSystemBrightnessAsync());\n\n        case 4:\n          return _context6.abrupt(\"return\", _context6.sent);\n\n        case 5:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function isUsingSystemBrightnessAsync() {\n  return _regeneratorRuntime.async(function isUsingSystemBrightnessAsync$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context7.next = 2;\n            break;\n          }\n\n          return _context7.abrupt(\"return\", false);\n\n        case 2:\n          _context7.next = 4;\n          return _regeneratorRuntime.awrap(ExpoBrightness.isUsingSystemBrightnessAsync());\n\n        case 4:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 5:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getSystemBrightnessModeAsync() {\n  return _regeneratorRuntime.async(function getSystemBrightnessModeAsync$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          if (!(Platform.OS !== 'android')) {\n            _context8.next = 2;\n            break;\n          }\n\n          return _context8.abrupt(\"return\", BrightnessMode.UNKNOWN);\n\n        case 2:\n          _context8.next = 4;\n          return _regeneratorRuntime.awrap(ExpoBrightness.getSystemBrightnessModeAsync());\n\n        case 4:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 5:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function setSystemBrightnessModeAsync(brightnessMode) {\n  return _regeneratorRuntime.async(function setSystemBrightnessModeAsync$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          if (!(Platform.OS !== 'android' || brightnessMode === BrightnessMode.UNKNOWN)) {\n            _context9.next = 2;\n            break;\n          }\n\n          return _context9.abrupt(\"return\");\n\n        case 2:\n          _context9.next = 4;\n          return _regeneratorRuntime.awrap(ExpoBrightness.setSystemBrightnessModeAsync(brightnessMode));\n\n        case 4:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 5:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function getPermissionsAsync() {\n  return _regeneratorRuntime.async(function getPermissionsAsync$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          return _context10.abrupt(\"return\", ExpoBrightness.getPermissionsAsync());\n\n        case 1:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function requestPermissionsAsync() {\n  return _regeneratorRuntime.async(function requestPermissionsAsync$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          return _context11.abrupt(\"return\", ExpoBrightness.requestPermissionsAsync());\n\n        case 1:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport var usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync\n});","map":{"version":3,"sources":["../src/Brightness.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  createPermissionHook,\n  PermissionExpiration,\n  PermissionHookOptions,\n  PermissionResponse,\n  PermissionStatus,\n  UnavailabilityError,\n} from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExpoBrightness from './ExpoBrightness';\n\n// @needsAudit\nexport enum BrightnessMode {\n  /**\n   * Means that the current brightness mode cannot be determined.\n   */\n  UNKNOWN = 0,\n  /**\n   * Mode in which the device OS will automatically adjust the screen brightness depending on the\n   * ambient light.\n   */\n  AUTOMATIC = 1,\n  /**\n   * Mode in which the screen brightness will remain constant and will not be adjusted by the OS.\n   */\n  MANUAL = 2,\n}\n\nexport { PermissionExpiration, PermissionHookOptions, PermissionResponse, PermissionStatus };\n\n/**\n * Returns whether the Brightness API is enabled on the current device. This does not check the app\n * permissions.\n * @return Async `boolean`, indicating whether the Brightness API is available on the current device.\n * Currently this resolves `true` on iOS and Android only.\n */\nexport async function isAvailableAsync(): Promise<boolean> {\n  return !!ExpoBrightness.getBrightnessAsync;\n}\n\n// @needsAudit\n/**\n * Gets the current brightness level of the device's main screen.\n * @return A `Promise` that fulfils with a number between `0` and `1`, inclusive, representing the\n * current screen brightness.\n */\nexport async function getBrightnessAsync(): Promise<number> {\n  if (!ExpoBrightness.getBrightnessAsync) {\n    throw new UnavailabilityError('expo-brightness', 'getBrightnessAsync');\n  }\n  return await ExpoBrightness.getBrightnessAsync();\n}\n\n// @needsAudit\n/**\n * Sets the current screen brightness. On iOS, this setting will persist until the device is locked,\n * after which the screen brightness will revert to the user's default setting. On Android, this\n * setting only applies to the current activity; it will override the system brightness value\n * whenever your app is in the foreground.\n * @param brightnessValue A number between `0` and `1`, inclusive, representing the desired screen\n * brightness.\n * @return A `Promise` that fulfils when the brightness has been successfully set.\n */\nexport async function setBrightnessAsync(brightnessValue: number): Promise<void> {\n  if (!ExpoBrightness.setBrightnessAsync) {\n    throw new UnavailabilityError('expo-brightness', 'setBrightnessAsync');\n  }\n  const clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  if (isNaN(clampedBrightnessValue)) {\n    throw new TypeError(`setBrightnessAsync cannot be called with ${brightnessValue}`);\n  }\n  return await ExpoBrightness.setBrightnessAsync(clampedBrightnessValue);\n}\n\n// @needsAudit\n/**\n * __Android only.__ Gets the global system screen brightness.\n * @return A `Promise` that is resolved with a number between `0` and `1`, inclusive, representing\n * the current system screen brightness.\n */\nexport async function getSystemBrightnessAsync(): Promise<number> {\n  if (Platform.OS !== 'android') {\n    return await getBrightnessAsync();\n  }\n  return await ExpoBrightness.getSystemBrightnessAsync();\n}\n\n// @needsAudit\n/**\n * > __WARNING:__ This method is experimental.\n *\n * __Android only.__ Sets the global system screen brightness and changes the brightness mode to\n * `MANUAL`. Requires `SYSTEM_BRIGHTNESS` permissions.\n * @param brightnessValue A number between `0` and `1`, inclusive, representing the desired screen\n * brightness.\n * @return A `Promise` that fulfils when the brightness has been successfully set.\n */\nexport async function setSystemBrightnessAsync(brightnessValue: number): Promise<void> {\n  const clampedBrightnessValue = Math.max(0, Math.min(brightnessValue, 1));\n  if (isNaN(clampedBrightnessValue)) {\n    throw new TypeError(`setSystemBrightnessAsync cannot be called with ${brightnessValue}`);\n  }\n  if (Platform.OS !== 'android') {\n    return await setBrightnessAsync(clampedBrightnessValue);\n  }\n  return await ExpoBrightness.setSystemBrightnessAsync(clampedBrightnessValue);\n}\n\n// @needsAudit\n/**\n * __Android only.__ Resets the brightness setting of the current activity to use the system-wide\n * brightness value rather than overriding it.\n * @return A `Promise` that fulfils when the setting has been successfully changed.\n */\nexport async function useSystemBrightnessAsync(): Promise<void> {\n  if (Platform.OS !== 'android') {\n    return;\n  }\n  // eslint-disable-next-line react-hooks/rules-of-hooks\n  return await ExpoBrightness.useSystemBrightnessAsync();\n}\n\n// @needsAudit\n/**\n * __Android only.__ Returns a boolean specifying whether or not the current activity is using the\n * system-wide brightness value.\n * @return A `Promise` that fulfils with `true` when the current activity is using the system-wide\n * brightness value, and `false` otherwise.\n */\nexport async function isUsingSystemBrightnessAsync(): Promise<boolean> {\n  if (Platform.OS !== 'android') {\n    return false;\n  }\n  return await ExpoBrightness.isUsingSystemBrightnessAsync();\n}\n\n// @needsAudit\n/**\n * __Android only.__ Gets the system brightness mode (e.g. whether or not the OS will automatically\n * adjust the screen brightness depending on ambient light).\n * @return A `Promise` that fulfils with a [`BrightnessMode`](#brightnessmode). Requires\n * `SYSTEM_BRIGHTNESS` permissions.\n */\nexport async function getSystemBrightnessModeAsync(): Promise<BrightnessMode> {\n  if (Platform.OS !== 'android') {\n    return BrightnessMode.UNKNOWN;\n  }\n  return await ExpoBrightness.getSystemBrightnessModeAsync();\n}\n\n// @needsAudit\n/**\n * __Android only.__ Sets the system brightness mode.\n * @param brightnessMode One of `BrightnessMode.MANUAL` or `BrightnessMode.AUTOMATIC`. The system\n * brightness mode cannot be set to `BrightnessMode.UNKNOWN`.\n */\nexport async function setSystemBrightnessModeAsync(brightnessMode: BrightnessMode): Promise<void> {\n  if (Platform.OS !== 'android' || brightnessMode === BrightnessMode.UNKNOWN) {\n    return;\n  }\n  return await ExpoBrightness.setSystemBrightnessModeAsync(brightnessMode);\n}\n\n// @needsAudit\n/**\n * Checks user's permissions for accessing system brightness.\n * @return A promise that fulfils with an object of type [PermissionResponse](#permissionrespons).\n */\nexport async function getPermissionsAsync(): Promise<PermissionResponse> {\n  return ExpoBrightness.getPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Asks the user to grant permissions for accessing system brightness.\n * @return A promise that fulfils with an object of type [PermissionResponse](#permissionrespons).\n */\nexport async function requestPermissionsAsync(): Promise<PermissionResponse> {\n  return ExpoBrightness.requestPermissionsAsync();\n}\n\n// @needsAudit\n/**\n * Check or request permissions to modify the system brightness.\n * This uses both `requestPermissionAsync` and `getPermissionsAsync` to interact with the permissions.\n *\n * @example\n * ```ts\n * const [status, requestPermission] = Brightness.usePermissions();\n * ```\n */\nexport const usePermissions = createPermissionHook({\n  getMethod: getPermissionsAsync,\n  requestMethod: requestPermissionsAsync,\n});\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}