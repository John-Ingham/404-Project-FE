{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport * as ImagePicker from 'expo-image-picker';\nimport { Camera } from 'expo-camera';\nvar styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#354D2A',\n    padding: 20,\n    borderRadius: 5\n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff'\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain'\n  },\n  container: {\n    flex: 2,\n    alignItems: 'center',\n    justifyContent: 'center'\n  },\n  cameraContainer: {\n    flex: 1\n  },\n  camera: {\n    flex: 1\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20\n  },\n  cameraButton: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center'\n  },\n  text: {\n    fontSize: 18,\n    color: 'white'\n  }\n});\n\nfunction CameraScreen() {\n  var _React$useState = React.useState({\n    localUri: \"\"\n  }),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      cameraRollImage = _React$useState2[0],\n      setCameraRollImage = _React$useState2[1];\n\n  var _React$useState3 = React.useState(null),\n      _React$useState4 = _slicedToArray(_React$useState3, 2),\n      cameraPhoto = _React$useState4[0],\n      setCameraPhoto = _React$useState4[1];\n\n  var _React$useState5 = React.useState(\"\"),\n      _React$useState6 = _slicedToArray(_React$useState5, 2),\n      haveCameraPermission = _React$useState6[0],\n      setHaveCameraPermission = _React$useState6[1];\n\n  var _useState = useState(Camera.Constants.Type.back),\n      _useState2 = _slicedToArray(_useState, 2),\n      type = _useState2[0],\n      setType = _useState2[1];\n\n  var openCameraAsync = function openCameraAsync() {\n    var cameraPermissionResult;\n    return _regeneratorRuntime.async(function openCameraAsync$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(Camera.requestCameraPermissionsAsync());\n\n          case 2:\n            cameraPermissionResult = _context.sent;\n\n            if (!(cameraPermissionResult.granted === false)) {\n              _context.next = 6;\n              break;\n            }\n\n            alert('Permission to use camera is required!');\n            return _context.abrupt(\"return\");\n\n          case 6:\n            setHaveCameraPermission(\"Yes\");\n            cameraFunction();\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  function cameraFunction() {\n    return React.createElement(View, {\n      style: styles.cameraContainer\n    }, React.createElement(Camera, {\n      style: styles.camera,\n      type: type\n    }, React.createElement(View, {\n      style: styles.buttonContainer\n    }, React.createElement(TouchableOpacity, {\n      style: styles.cameraButton,\n      onPress: function onPress() {\n        setType(type === Camera.Constants.Type.back ? Camera.Constants.Type.front : Camera.Constants.Type.back);\n      }\n    }, React.createElement(Text, {\n      style: styles.text\n    }, \" Flip \")))));\n  }\n\n  var openImagePickerAsync = function openImagePickerAsync() {\n    var permissionResult, pickerResult;\n    return _regeneratorRuntime.async(function openImagePickerAsync$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.requestMediaLibraryPermissionsAsync());\n\n          case 2:\n            permissionResult = _context2.sent;\n\n            if (!(permissionResult.granted === false)) {\n              _context2.next = 6;\n              break;\n            }\n\n            alert('Permission to access camera roll is required!');\n            return _context2.abrupt(\"return\");\n\n          case 6:\n            _context2.next = 8;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 8:\n            pickerResult = _context2.sent;\n\n            if (!(pickerResult.cancelled === true)) {\n              _context2.next = 11;\n              break;\n            }\n\n            return _context2.abrupt(\"return\");\n\n          case 11:\n            setCameraRollImage({\n              localUri: pickerResult.uri\n            });\n\n          case 12:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  if (cameraRollImage.localUri !== \"\") {\n    return React.createElement(View, {\n      style: styles.container\n    }, React.createElement(Image, {\n      source: {\n        uri: cameraRollImage.localUri\n      },\n      style: styles.thumbnail\n    }), React.createElement(TouchableOpacity, {\n      onPress: function onPress() {\n        return alert('Saved!');\n      },\n      style: styles.button\n    }, React.createElement(Text, {\n      style: styles.buttonText\n    }, \"Save chosen image\")));\n  }\n\n  return React.createElement(View, {\n    style: styles.container\n  }, React.createElement(Text, null, \"Add a plant to your collection!\"), React.createElement(Text, null, \"Push button to select from camera roll \"), React.createElement(TouchableOpacity, {\n    onPress: openImagePickerAsync,\n    style: styles.button\n  }, React.createElement(Text, {\n    style: styles.buttonText\n  }, \"Pick a photo\")), React.createElement(Text, null, \" Push button to open camera\"), React.createElement(TouchableOpacity, {\n    onPress: openCameraAsync,\n    style: styles.button\n  }, React.createElement(Text, {\n    style: styles.buttonText\n  }, \"Pick a photo\")));\n}\n\nexport default CameraScreen;","map":{"version":3,"sources":["/home/john/northcoders/projects/404-Project-FE/components/CameraScreen.tsx"],"names":["React","useState","ImagePicker","Camera","styles","StyleSheet","create","button","backgroundColor","padding","borderRadius","buttonText","fontSize","color","thumbnail","width","height","resizeMode","container","flex","alignItems","justifyContent","cameraContainer","camera","buttonContainer","flexDirection","margin","cameraButton","alignSelf","text","CameraScreen","localUri","cameraRollImage","setCameraRollImage","cameraPhoto","setCameraPhoto","haveCameraPermission","setHaveCameraPermission","Constants","Type","back","type","setType","openCameraAsync","requestCameraPermissionsAsync","cameraPermissionResult","granted","alert","cameraFunction","front","openImagePickerAsync","requestMediaLibraryPermissionsAsync","permissionResult","launchImageLibraryAsync","pickerResult","cancelled","uri"],"mappings":"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","sourcesContent":["import React, {useState, useEffect} from 'react';\n\nimport { View, Text, Image, TouchableOpacity, StyleSheet } from \"react-native\";\nimport * as ImagePicker from 'expo-image-picker'\nimport {Camera} from 'expo-camera'\n\n\nconst styles = StyleSheet.create({\n  button: {\n    backgroundColor: '#354D2A',\n    padding: 20,\n    borderRadius: 5,\n    \n  },\n  buttonText: {\n    fontSize: 20,\n    color: '#fff',\n  },\n  thumbnail: {\n    width: 300,\n    height: 300,\n    resizeMode: 'contain', //useful line, makes the image not square if the selected image is not\n  },\n  container: {\n    flex: 2,\n    alignItems: 'center',\n    justifyContent: 'center',\n  },\n  // camera\n  cameraContainer: {\n    flex: 1,\n  },\n  camera: {\n    flex: 1,\n  },\n  buttonContainer: {\n    flex: 1,\n    backgroundColor: 'transparent',\n    flexDirection: 'row',\n    margin: 20,\n  },\n  cameraButton: {\n    flex: 0.1,\n    alignSelf: 'flex-end',\n    alignItems: 'center',\n  },\n  text: {\n    fontSize: 18,\n    color: 'white',\n  },\n\n})\n\nfunction CameraScreen() {\n \n\n  const [cameraRollImage, setCameraRollImage] = React.useState({localUri:\"\"})\n  const [cameraPhoto, setCameraPhoto] = React.useState(null)\n  const [haveCameraPermission, setHaveCameraPermission] = React.useState(\"\")\n  const [type, setType] = useState(Camera.Constants.Type.back);\n\n  \n\n  let openCameraAsync = async () => {\n    let cameraPermissionResult = await Camera.requestCameraPermissionsAsync()\n\n    if (cameraPermissionResult.granted === false) {\n      alert ('Permission to use camera is required!')\n      return\n    }\n    \n    setHaveCameraPermission(\"Yes\")  \n    cameraFunction()\n  }\n   function cameraFunction() {\n     return (\n    <View style={styles.cameraContainer}>\n      <Camera style={styles.camera} type={type}>\n        <View style={styles.buttonContainer}>\n          <TouchableOpacity\n            style={styles.cameraButton}\n            onPress={() => {\n              setType(\n                type === Camera.Constants.Type.back\n                  ? Camera.Constants.Type.front\n                  : Camera.Constants.Type.back\n              );\n            }}>\n            <Text style={styles.text}> Flip </Text>\n          </TouchableOpacity>\n        </View>\n      </Camera>\n    </View>\n  );\n          }\n\n  let openImagePickerAsync = async () => {\n    let permissionResult = await ImagePicker.requestMediaLibraryPermissionsAsync()\n\n    if (permissionResult.granted === false) {\n      alert('Permission to access camera roll is required!')\n      return\n    }\n\n    let pickerResult = await ImagePicker.launchImageLibraryAsync()\n    if (pickerResult.cancelled === true) {\n      return\n    }\n    setCameraRollImage({ localUri: pickerResult.uri })\n\n  }\n  \n  if (cameraRollImage.localUri !== \"\"){\n    return (\n      <View style={styles.container}>\n        <Image\n          source={{ uri: cameraRollImage.localUri }}\n          style={styles.thumbnail}\n        />\n        <TouchableOpacity\n          onPress={() => alert('Saved!')}\n          style={styles.button}\n        >\n\n        <Text style={styles.buttonText}>Save chosen image</Text>\n        </TouchableOpacity>\n      </View>\n    );\n  }\n\n  return (\n    <View style={styles.container}>\n     \n      <Text >Add a plant to your collection!</Text>\n      {/* <Image source={} style={} /> */}\n      <Text>Push button to select from camera roll </Text>\n\n      <TouchableOpacity onPress={openImagePickerAsync} style={styles.button}>\n        <Text style={styles.buttonText}>Pick a photo</Text>\n      </TouchableOpacity>\n      <Text> Push button to open camera</Text>\n      <TouchableOpacity onPress={openCameraAsync} style={styles.button}>\n        <Text style={styles.buttonText}>Pick a photo</Text>\n      </TouchableOpacity>\n    </View>\n  )\n  \n}\n\n\n  export default CameraScreen"]},"metadata":{},"sourceType":"module"}