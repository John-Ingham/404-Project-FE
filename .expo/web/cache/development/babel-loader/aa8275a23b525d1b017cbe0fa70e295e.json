{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport SafeAreaView from \"react-native-web/dist/exports/SafeAreaView\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport StatusBar from \"react-native-web/dist/exports/StatusBar\";\nimport ImageBackground from \"react-native-web/dist/exports/ImageBackground\";\nimport { useState, useEffect } from \"react\";\nimport { getPlants } from \"./utils/Api\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport { ProgressBar } from \"react-native-paper\";\n\nvar SearchedForPlants = function SearchedForPlants(props) {\n  var navigation = props.navigation;\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      searchedPlants = _useState2[0],\n      setSearchedPlants = _useState2[1];\n\n  var _useState3 = useState(null),\n      _useState4 = _slicedToArray(_useState3, 2),\n      selectedId = _useState4[0],\n      setSelectedId = _useState4[1];\n\n  var _useState5 = useState(true),\n      _useState6 = _slicedToArray(_useState5, 2),\n      loading = _useState6[0],\n      setLoading = _useState6[1];\n\n  var _props$route$params = props.route.params,\n      plantCategory = _props$route$params.plantCategory,\n      searchQuery = _props$route$params.searchQuery;\n  useEffect(function () {\n    setLoading(true);\n    getPlants(plantCategory, searchQuery).then(function (response) {\n      setSearchedPlants(response);\n      setLoading(false);\n    }).catch(function (err) {\n      console.log(err, \"<-----err\");\n    });\n  }, []);\n\n  var handleOnPress = function handleOnPress(commonName) {\n    navigation.navigate(\"Single Looked Up Plant\", commonName);\n  };\n\n  var Item = function Item(_ref) {\n    var item = _ref.item,\n        onPress = _ref.onPress,\n        backgroundColor = _ref.backgroundColor,\n        textColor = _ref.textColor;\n    return React.createElement(TouchableOpacity, {\n      onPress: onPress,\n      style: [styles.item, backgroundColor]\n    }, React.createElement(ImageBackground, {\n      imageStyle: {\n        opacity: 0.4\n      },\n      source: {\n        uri: item.image_url\n      },\n      style: styles.imagebackground\n    }, React.createElement(Text, {\n      style: [styles.title, textColor]\n    }, item.commonName), React.createElement(Text, {\n      style: [styles.subtitle, textColor]\n    }, item.botanicalName)));\n  };\n\n  var renderItem = function renderItem(_ref2) {\n    var item = _ref2.item;\n    var backgroundColor = item.id === selectedId ? \"#6e3b6e\" : \"#082d0fff\";\n    var color = item.id === selectedId ? \"white\" : \"#dee5e5ff\";\n    if (loading) return React.createElement(View, null, React.createElement(Text, null, \"loading...\"), React.createElement(ProgressBar, null));\n\n    if (singlePlant == {}) {\n      return React.createElement(View, null, React.createElement(Text, null, \" No Results Found\"));\n    }\n\n    return React.createElement(Item, {\n      item: item,\n      onPress: function onPress() {\n        return handleOnPress(item);\n      },\n      backgroundColor: {\n        backgroundColor: backgroundColor\n      },\n      textColor: {\n        color: color\n      }\n    });\n  };\n\n  console.log(selectedId);\n  return React.createElement(SafeAreaView, {\n    style: styles.container\n  }, React.createElement(FlatList, {\n    contentContainerStyle: styles.subtitleView,\n    data: searchedPlants,\n    renderItem: renderItem,\n    keyExtractor: function keyExtractor(item) {\n      return item.botanicalName;\n    },\n    extraData: selectedId\n  }));\n};\n\nvar styles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: \"column\",\n    paddingLeft: 10,\n    paddingTop: 5\n  },\n  ratingImage: {\n    height: 19.21,\n    width: 100\n  },\n  ratingText: {\n    paddingLeft: 10,\n    color: \"grey\"\n  },\n  scrollView: {\n    backgroundColor: \"#082d0fff\",\n    marginHorizontal: 20\n  },\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0\n  },\n  item: {\n    flex: 1,\n    padding: 10,\n    marginVertical: 8,\n    marginHorizontal: 20,\n    borderRadius: 15\n  },\n  title: {\n    fontSize: 25,\n    fontWeight: \"900\"\n  },\n  subtitle: {\n    fontSize: 15\n  },\n  imagebackground: {\n    width: '100%',\n    height: '100%',\n    borderStyle: 'solid',\n    borderColor: 'grey',\n    borderWidth: 1\n  }\n});\nexport default SearchedForPlants;","map":{"version":3,"sources":["/Users/philbulleyment/Documents/northcoders/projects/final-project/components/SearchedForPlants.tsx"],"names":["React","useState","useEffect","getPlants","FlatList","ProgressBar","SearchedForPlants","props","navigation","searchedPlants","setSearchedPlants","selectedId","setSelectedId","loading","setLoading","route","params","plantCategory","searchQuery","then","response","catch","err","console","log","handleOnPress","commonName","navigate","Item","item","onPress","backgroundColor","textColor","styles","opacity","uri","image_url","imagebackground","title","subtitle","botanicalName","renderItem","id","color","singlePlant","container","subtitleView","StyleSheet","create","flexDirection","paddingLeft","paddingTop","ratingImage","height","width","ratingText","scrollView","marginHorizontal","flex","marginTop","StatusBar","currentHeight","padding","marginVertical","borderRadius","fontSize","fontWeight","borderStyle","borderColor","borderWidth"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport {\n  View,\n  Text,\n  ScrollView,\n  StyleSheet,\n  List,\n  SafeAreaView,\n  TouchableOpacity,\n  StatusBar,\n  ImageBackground\n} from \"react-native\";\nimport { useState, useEffect } from \"react\";\nimport { getPlants } from \"./utils/Api\";\nimport { ListItem, Avatar } from \"react-native-elements\";\nimport { FlatList } from \"react-native-gesture-handler\";\nimport { ProgressBar, Colors } from \"react-native-paper\";\n\nconst SearchedForPlants = (props: any) => {\n  const { navigation } = props;\n  const [searchedPlants, setSearchedPlants] = useState([]);\n  const [selectedId, setSelectedId] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const { plantCategory, searchQuery } = props.route.params;\n\n  useEffect(() => {\n    setLoading(true);\n    getPlants(plantCategory, searchQuery)\n      .then((response) => {\n        setSearchedPlants(response);\n        setLoading(false);\n      })\n      .catch((err) => {\n        console.log(err, \"<-----err\");\n      });\n  }, []);\n\n  const handleOnPress = (commonName: string) => {\n    navigation.navigate(\"Single Looked Up Plant\", commonName);\n  };\n\n  const Item = ({ item, onPress, backgroundColor, textColor }) => (\n    <TouchableOpacity onPress={onPress} style={[styles.item, backgroundColor]}>\n    <ImageBackground imageStyle={{opacity: 0.4}} source={{ uri: item.image_url }} style={styles.imagebackground}>\n      <Text style={[styles.title, textColor]}>{item.commonName}</Text>\n      <Text style={[styles.subtitle, textColor]}>{item.botanicalName}</Text>\n      {/* <Avatar source={{ uri: item.image_url }} /> */}\n      </ImageBackground>\n    </TouchableOpacity>\n  );\n\n  const renderItem = ({ item }) => {\n    const backgroundColor = item.id === selectedId ? \"#6e3b6e\" : \"#082d0fff\";\n    const color = item.id === selectedId ? \"white\" : \"#dee5e5ff\";\n\n    if (loading)\n      return (\n        <View>\n          <Text>loading...</Text>\n          <ProgressBar />\n        </View>\n      );\n\n      if (singlePlant == {}) {return ( \n        <View>\n        <Text> No Results Found</Text>\n        </View>\n      )\n      }\n\n    return (\n      <Item\n        item={item}\n        onPress={() => handleOnPress(item)}\n        backgroundColor={{ backgroundColor }}\n        textColor={{ color }}\n      />\n    );\n  };\n  console.log(selectedId);\n  return (\n    <SafeAreaView style={styles.container}>\n      <FlatList\n        contentContainerStyle={styles.subtitleView}\n        data={searchedPlants}\n        renderItem={renderItem}\n        keyExtractor={(item) => item.botanicalName}\n        extraData={selectedId}\n      />\n    </SafeAreaView>\n  );\n};\n\nconst styles = StyleSheet.create({\n  subtitleView: {\n    flexDirection: \"column\",\n    paddingLeft: 10,\n    paddingTop: 5,\n  },\n  ratingImage: { height: 19.21, width: 100 },\n  ratingText: { paddingLeft: 10, color: \"grey\" },\n  scrollView: {\n    backgroundColor: \"#082d0fff\",\n    marginHorizontal: 20,\n  },\n  container: {\n    flex: 1,\n    marginTop: StatusBar.currentHeight || 0,\n  },\n  item: {\n    flex: 1,\n    padding: 10,\n    marginVertical: 8,\n    marginHorizontal: 20,\n    borderRadius: 15,\n  },\n  title: {\n    fontSize: 25,\n    fontWeight:\"900\",\n  },\n  subtitle: {\n    fontSize: 15,\n  },\n  imagebackground: {\n  width: '100%', \n  height: '100%', \n  borderStyle: 'solid', \n  borderColor: 'grey', \n  borderWidth: 1,\n}\n});\n\nexport default SearchedForPlants;\n"]},"metadata":{},"sourceType":"module"}